name: ⚡ Test1 API Ultra-Fast Deploy

on:
  push:
    branches: [main, dev]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v3'

jobs:
  build:
    runs-on: self-hosted
    outputs:
      deployment-id: ${{ steps.meta.outputs.deployment-id }}
      cache-hit: ${{ steps.cache-check.outputs.cache-hit }}
      branch: ${{ steps.branch.outputs.branch }}
    steps:
      - name: 📋 Get Branch Name
        id: branch
        run: |
          BRANCH=${GITHUB_REF##*/}
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "🌿 Branch: $BRANCH"

      - name: 📋 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 📊 Generate Metadata
        id: meta
        run: |
          DEPLOYMENT_ID="$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:7}"
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "🆔 Deployment ID: $DEPLOYMENT_ID"

      - name: ⚙️ Setup Build Environment Variables
        run: |
          BRANCH="${{ steps.branch.outputs.branch }}"
          echo "🔧 Setting up build-time environment variables for branch: $BRANCH"
          
          # Create .env file for build process
          if [ "$BRANCH" = "main" ]; then
            echo '${{ secrets.PROD_ENV_SECRET }}' > .env.production
            echo '${{ secrets.PROD_ENV_SECRET }}' > .env.local
            echo "📝 Created production environment files"
          else
            echo '${{ secrets.DEV_ENV_SECRET }}' > .env.development
            echo '${{ secrets.DEV_ENV_SECRET }}' > .env.local
            echo "📝 Created development environment files"
          fi
          
          # Show environment variables that will be available during build (non-sensitive only)
          echo "🔍 Build-time environment variables (NEXT_PUBLIC_ only):"
          grep "^NEXT_PUBLIC_" .env.local | sed 's/=.*/=***MASKED***/' || echo "No NEXT_PUBLIC_ variables found"
          
          # Verify the environment file exists and has content
          echo "📄 Environment file size: $(wc -l < .env.local) lines"

      - name: ⚡ Setup Node.js with Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Cache Dependencies Only
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ env.CACHE_VERSION }}-deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-deps-${{ runner.os }}-

      - name: 🔄 Cache Build Output
        id: cache-check
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ env.CACHE_VERSION }}-build-${{ runner.os }}-${{ steps.branch.outputs.branch }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.json', '!node_modules/**') }}-${{ hashFiles('.env.*') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-build-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: 🚀 Install Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          npm ci --prefer-offline --no-audit --no-fund --silent --progress=false
          echo "📦 Dependencies installed"

      - name: 🏗️ Build Application
        if: steps.cache-check.outputs.cache-hit != 'true'
        run: |
          echo "🏗️ Building with environment variables..."
          
          # Verify environment variables are available for build
          echo "🔍 Checking NEXT_PUBLIC_ variables before build:"
          env | grep "^NEXT_PUBLIC_" || echo "No NEXT_PUBLIC_ variables in environment"
          
          # Build with explicit environment
          NODE_ENV=production npm run build
          
          echo "✅ Build completed"
          
          # Verify build output contains environment variables
          echo "🔍 Checking if environment variables are baked into build..."
          if [ -f ".next/static/chunks/webpack-*.js" ]; then
            WEBPACK_FILE=$(ls .next/static/chunks/webpack-*.js | head -1)
            if grep -q "NEXT_PUBLIC_NODE_ENV" "$WEBPACK_FILE" 2>/dev/null; then
              echo "✅ Environment variables found in webpack bundle"
            else
              echo "⚠️ Environment variables not found in webpack bundle"
            fi
          fi

      - name: 📦 Create Optimized Package
        run: |
          echo "📦 Creating optimized package..."
          
          # Verify build exists
          if [ ! -d ".next" ]; then
            echo "❌ .next directory not found! Build may have failed."
            exit 1
          fi
          
          # Show build info
          echo "📊 Build info:"
          echo "  - .next size: $(du -sh .next | cut -f1)"
          echo "  - node_modules size: $(du -sh node_modules | cut -f1)"
          
          # Include environment files in the package
          tar -czf deployment.tar.gz \
            --exclude='node_modules/.cache' \
            --exclude='node_modules/*/test*' \
            --exclude='node_modules/*/docs' \
            --exclude='node_modules/*/*.md' \
            --exclude='.next/cache' \
            .next \
            node_modules \
            public \
            package.json \
            next.config.* \
            .env.*
          echo "📦 Package size: $(du -sh deployment.tar.gz | cut -f1)"

      - name: 🚀 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ steps.meta.outputs.deployment-id }}
          path: deployment.tar.gz
          retention-days: 1
          compression-level: 1

  deploy:
    needs: build
    runs-on: self-hosted
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
      - name: 📥 Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-${{ needs.build.outputs.deployment-id }}
          path: .

      - name: ⚙️ Setup Environment Variables
        id: env-setup
        run: |
          BRANCH="${{ needs.build.outputs.branch }}"
          echo "🌿 Branch: $BRANCH"
          
          if [ "$BRANCH" = "main" ]; then
            # Production environment
            SERVER="${{ secrets.PROD_DOMAIN }}" 
            USER="${{ secrets.PROD_SERVER_USER }}"
            PORT_SSH="${{ secrets.PROD_SSH_PORT }}"
            DEPLOY_PATH="${{ secrets.PROD_SERVER_PATH }}"
            PROCESS_NAME="${{ secrets.PROD_PROCESS_NAME }}"
            PORT_A="${{ secrets.PROD_PORT_A }}"
            PORT_B="${{ secrets.PROD_PORT_B }}"
            DOMAIN="${{ secrets.PROD_DOMAIN }}"
            ENV_SECRET="${{ secrets.PROD_ENV_SECRET }}"
            SSH_KEY="${{ secrets.PROD_SSH_PRIVATE_KEY }}"
            UPSTREAM_NAME="${{ secrets.PROD_UPSTREAM_NAME }}"
          else
            # Development environment
            SERVER="${{ secrets.DEV_DOMAIN }}"
            USER="${{ secrets.DEV_SERVER_USER }}"
            PORT_SSH="${{ secrets.DEV_SSH_PORT }}"
            DEPLOY_PATH="${{ secrets.DEV_SERVER_PATH }}"
            PROCESS_NAME="${{ secrets.DEV_PROCESS_NAME }}"
            PORT_A="${{ secrets.DEV_PORT_A }}"
            PORT_B="${{ secrets.DEV_PORT_B }}"
            DOMAIN="${{ secrets.DEV_DOMAIN }}"
            ENV_SECRET="${{ secrets.DEV_ENV_SECRET }}"
            SSH_KEY="${{ secrets.DEV_SSH_PRIVATE_KEY }}"
            UPSTREAM_NAME="${{ secrets.DEV_UPSTREAM_NAME }}"
          fi
          
          # Validate required variables
          if [ -z "$SERVER" ]; then
            echo "❌ SERVER is not set. Please add SERVER_HOST to your repository secrets."
            exit 1
          fi
          
          if [ -z "$USER" ]; then
            echo "❌ USER is not set. Please add SERVER_USER to your repository secrets."
            exit 1
          fi
          
          if [ -z "$PORT_SSH" ]; then
            echo "⚠️ PORT_SSH is not set, defaulting to 22"
            PORT_SSH="22"
          fi
          
          if [ -z "$SSH_KEY" ]; then
            echo "❌ SSH_KEY is not set. Please add SSH_PRIVATE_KEY to your repository secrets."
            exit 1
          fi
          
          if [ -z "$DEPLOY_PATH" ]; then
            echo "❌ DEPLOY_PATH is not set. Please add DEPLOY_PATH to your repository secrets."
            exit 1
          fi
          
          # Set outputs for use in later steps
          echo "server=$SERVER" >> $GITHUB_OUTPUT
          echo "user=$USER" >> $GITHUB_OUTPUT
          echo "port=$PORT_SSH" >> $GITHUB_OUTPUT
          echo "deploy-path=$DEPLOY_PATH" >> $GITHUB_OUTPUT
          echo "process-name=$PROCESS_NAME" >> $GITHUB_OUTPUT
          echo "port-a=$PORT_A" >> $GITHUB_OUTPUT
          echo "port-b=$PORT_B" >> $GITHUB_OUTPUT
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT
          echo "upstream-name=$UPSTREAM_NAME" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          
          # Set environment variables for this job
          echo "DEPLOYMENT_ID=${{ needs.build.outputs.deployment-id }}" >> $GITHUB_ENV
          echo "SERVER=$SERVER" >> $GITHUB_ENV
          echo "USER=$USER" >> $GITHUB_ENV
          echo "PORT_SSH=$PORT_SSH" >> $GITHUB_ENV
          echo "DEPLOY_PATH=$DEPLOY_PATH" >> $GITHUB_ENV
          echo "PROCESS_NAME=$PROCESS_NAME" >> $GITHUB_ENV
          echo "PORT_A=$PORT_A" >> $GITHUB_ENV
          echo "PORT_B=$PORT_B" >> $GITHUB_ENV
          echo "DOMAIN=$DOMAIN" >> $GITHUB_ENV
          echo "UPSTREAM_NAME=$UPSTREAM_NAME" >> $GITHUB_ENV

      - name: 🔐 Setup SSH Configuration
        run: |
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Determine which SSH key to use based on branch
          BRANCH="${{ needs.build.outputs.branch }}"
          if [ "$BRANCH" = "main" ]; then
            SSH_KEY='${{ secrets.PROD_SSH_PRIVATE_KEY }}'
          else
            SSH_KEY='${{ secrets.DEV_SSH_PRIVATE_KEY }}'
          fi
          
          # Write SSH private key
          echo "$SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Verify SSH key format
          if ! ssh-keygen -l -f ~/.ssh/deploy_key >/dev/null 2>&1; then
            echo "❌ Invalid SSH key format"
            exit 1
          fi
          
          # Validate server hostname
          if [ -z "${{ steps.env-setup.outputs.server }}" ]; then
            echo "❌ Server hostname is empty. Please check your repository secrets."
            exit 1
          fi
          
          # Create SSH config with validated hostname
          cat > ~/.ssh/config << EOF
          Host deploy
            HostName ${{ steps.env-setup.outputs.server }}
            User ${{ steps.env-setup.outputs.user }}
            Port ${{ steps.env-setup.outputs.port }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            ServerAliveInterval 30
            ConnectTimeout 10
            Compression yes
          EOF
          
          # Test SSH connection
          echo "🔍 Testing SSH connection to ${{ steps.env-setup.outputs.server }}..."
          if ssh -o BatchMode=yes -o ConnectTimeout=10 deploy "echo 'SSH connection successful'"; then
            echo "✅ SSH connection test passed"
          else
            echo "❌ SSH connection test failed"
            exit 1
          fi

      - name: 🧹 Clean Old Deployments First
        run: |
          echo "🧹 Cleaning old deployments (keeping only 2 most recent)..."
          ssh deploy "mkdir -p ${{ steps.env-setup.outputs.deploy-path }}/deployments && cd ${{ steps.env-setup.outputs.deploy-path }}/deployments && ls -t | tail -n +3 | xargs -r rm -rf || echo 'No old deployments to clean'"

      - name: 🚀 Deploy Application
        run: |
          # Define variables locally first
          DEPLOY_DIR="${{ env.DEPLOYMENT_ID }}"
          BRANCH="${{ needs.build.outputs.branch }}"
          UPSTREAM_NAME="$UPSTREAM_NAME"
          DEPLOY_PATH="$DEPLOY_PATH"
          PROCESS_NAME="$PROCESS_NAME"
          PORT_A="$PORT_A"
          PORT_B="$PORT_B"
          
          # Verify all required variables are set
          echo "🔍 Verifying deployment variables..."
          echo "  - DEPLOY_DIR: $DEPLOY_DIR"
          echo "  - BRANCH: $BRANCH"
          echo "  - UPSTREAM_NAME: $UPSTREAM_NAME"
          echo "  - DEPLOY_PATH: $DEPLOY_PATH"
          echo "  - PROCESS_NAME: $PROCESS_NAME"
          echo "  - PORT_A: $PORT_A"
          echo "  - PORT_B: $PORT_B"
          
          if [ -z "$DEPLOY_PATH" ]; then
            echo "❌ DEPLOY_PATH is empty! Cannot proceed with deployment."
            exit 1
          fi
          
          echo "📤 Creating deployment directory: $DEPLOY_DIR"
          ssh deploy "mkdir -p $DEPLOY_PATH/deployments/$DEPLOY_DIR"
          
          echo "📤 Uploading deployment package..."
          scp -C deployment.tar.gz deploy:$DEPLOY_PATH/deployments/$DEPLOY_DIR/deployment.tar.gz
          
          # Copy environment variables based on branch (for runtime)
          if [ "$BRANCH" = "main" ]; then
            echo '${{ secrets.PROD_ENV_SECRET }}' | ssh deploy "cat > $DEPLOY_PATH/deployments/$DEPLOY_DIR/.env"
          else
            echo '${{ secrets.DEV_ENV_SECRET }}' | ssh deploy "cat > $DEPLOY_PATH/deployments/$DEPLOY_DIR/.env"
          fi
          
          # Create a temporary script file with all variables explicitly defined
          cat > deploy_script.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # These variables will be replaced by sed
          DEPLOY_PATH="__DEPLOY_PATH__"
          DEPLOYMENT_ID="__DEPLOYMENT_ID__"
          UPSTREAM_NAME="__UPSTREAM_NAME__"
          PROCESS_NAME="__PROCESS_NAME__"
          PORT_A="__PORT_A__"
          PORT_B="__PORT_B__"
          BRANCH="__BRANCH__"
          
          # Setup paths
          NEW_DEPLOYMENT_PATH="$DEPLOY_PATH/deployments/$DEPLOYMENT_ID"
          CURRENT_PATH="$DEPLOY_PATH/current"
          STAGING_PATH="$DEPLOY_PATH/staging"
          
          echo "🏗️ Setting up deployment paths..."
          echo "📂 New deployment: $NEW_DEPLOYMENT_PATH"
          echo "📂 Current: $CURRENT_PATH"
          echo "📂 Staging: $STAGING_PATH"
          echo "🔧 Upstream name: $UPSTREAM_NAME"
          echo "🌿 Branch: $BRANCH"
          
          # Create directories
          mkdir -p "$NEW_DEPLOYMENT_PATH" "$CURRENT_PATH" "$STAGING_PATH" "$DEPLOY_PATH/logs"
          
          cd "$NEW_DEPLOYMENT_PATH"
          
          # Extract package
          echo "📦 Extracting package..."
          tar -xzf deployment.tar.gz && rm deployment.tar.gz
          
          # Verify critical files
          [ ! -f "package.json" ] && { echo "❌ package.json missing"; exit 1; }
          [ ! -d ".next" ] && { echo "❌ .next directory missing"; exit 1; }
          [ ! -f ".env" ] && { echo "❌ .env file missing"; exit 1; }
          
          # Show build timestamp to verify it's fresh
          echo "✅ Package extracted and verified"
          echo "📅 Build timestamp: $(stat -c %y .next/BUILD_ID 2>/dev/null || echo 'N/A')"
          echo "🔍 Deployment ID in package: $DEPLOYMENT_ID"
          
          # Check if environment variables are baked into the build
          echo "🔍 Checking if NEXT_PUBLIC variables are in build..."
          if [ -f ".next/static/chunks/webpack-"*.js ]; then
            WEBPACK_FILE=$(ls .next/static/chunks/webpack-*.js | head -1)
            if grep -q "NEXT_PUBLIC_NODE_ENV" "$WEBPACK_FILE" 2>/dev/null; then
              echo "✅ NEXT_PUBLIC_NODE_ENV found in webpack bundle"
              # Extract the value to verify
              FOUND_VALUE=$(grep -o "NEXT_PUBLIC_NODE_ENV[^,]*" "$WEBPACK_FILE" | head -1 || echo "not found")
              echo "📋 Found in bundle: $FOUND_VALUE"
            else
              echo "⚠️ NEXT_PUBLIC_NODE_ENV not found in webpack bundle"
              echo "🔍 Searching all build files..."
              find .next -name "*.js" -exec grep -l "NEXT_PUBLIC_NODE_ENV" {} \; || echo "Not found in any build files"
            fi
          fi
          
          # CRITICAL FIX: Use .cjs extension for CommonJS scripts
          echo "🔧 Parsing .env file for PM2..."
          
          # Show .env file contents (masked sensitive data)
          echo "📄 .env file contents (first 10 lines, sensitive data masked):"
          head -10 .env | sed 's/=.*/=***MASKED***/' || echo "Could not read .env file"
          
          # Parse .env file and create a JavaScript object for PM2 - FIXED: Use .cjs extension
          cat > parse_env.cjs << 'EOFJS'
          const fs = require('fs');
          const path = require('path');
          
          try {
            const envFile = fs.readFileSync('.env', 'utf8');
            const envVars = {};
            
            envFile.split('\n').forEach(line => {
              line = line.trim();
              if (line && !line.startsWith('#')) {
                const [key, ...valueParts] = line.split('=');
                if (key && valueParts.length > 0) {
                  const value = valueParts.join('=').replace(/^["']|["']$/g, '');
                  envVars[key.trim()] = value;
                }
              }
            });
            
            console.log(JSON.stringify(envVars, null, 2));
          } catch (error) {
            console.error('Error parsing .env file:', error.message);
            process.exit(1);
          }
          EOFJS
          
          # Parse environment variables - FIXED: Use .cjs extension
          ENV_VARS=$(node parse_env.cjs)
          echo "🔍 Parsed environment variables count: $(echo "$ENV_VARS" | jq 'keys | length')"
          
          # Show NEXT_PUBLIC variables specifically
          echo "🔍 NEXT_PUBLIC variables in .env:"
          grep "^NEXT_PUBLIC_" .env || echo "No NEXT_PUBLIC_ variables found in .env"
          
          # Smart detection of deployment type
          FIRST_DEPLOYMENT=false
          OLD_PROCESS=""
          CURRENT_PORT=""
          
          # Check for existing processes with our process name pattern
          EXISTING_PROCESSES=$(pm2 list | grep "$PROCESS_NAME" | grep "online" || true)
          
          if [ -z "$EXISTING_PROCESSES" ]; then
            echo "🎯 No running processes found - First deployment or recovery"
            FIRST_DEPLOYMENT=true
          else
            echo "🔄 Found existing processes - Regular update"
            # Get current port from existing upstream config
            if [ -f "/etc/nginx/conf.d/$UPSTREAM_NAME.conf" ]; then
              CURRENT_PORT=$(grep -o "127.0.0.1:[0-9]*" /etc/nginx/conf.d/$UPSTREAM_NAME.conf | cut -d: -f2)
              echo "📍 Current Nginx port: $CURRENT_PORT"
            fi
          fi
          
          # Determine ports and processes
          if [ "$FIRST_DEPLOYMENT" = true ]; then
            NEW_PORT="$PORT_A"
            NEW_PROCESS="$PROCESS_NAME-a"
            OLD_PROCESS=""
            echo "🚀 First deployment: Using port $NEW_PORT with process $NEW_PROCESS"
          else
            # Switch ports for zero-downtime
            if [ "$CURRENT_PORT" = "$PORT_A" ]; then
              NEW_PORT="$PORT_B"
              NEW_PROCESS="$PROCESS_NAME-b"
              OLD_PROCESS="$PROCESS_NAME-a"
            else
              NEW_PORT="$PORT_A"
              NEW_PROCESS="$PROCESS_NAME-a"
              OLD_PROCESS="$PROCESS_NAME-b"
            fi
            echo "🔄 Port switch: $CURRENT_PORT → $NEW_PORT"
            echo "🔄 Process switch: $OLD_PROCESS → $NEW_PROCESS"
          fi
          
          # CRITICAL FIX: Create PM2 config with ALL environment variables from .env - FIXED: Use .cjs extension
          cat > create_pm2_config.cjs << 'EOFJS'
          const fs = require('fs');
          
          // Parse .env file
          const envFile = fs.readFileSync('.env', 'utf8');
          const envVars = {};
          
          envFile.split('\n').forEach(line => {
            line = line.trim();
            if (line && !line.startsWith('#')) {
              const [key, ...valueParts] = line.split('=');
              if (key && valueParts.length > 0) {
                const value = valueParts.join('=').replace(/^["']|["']$/g, '');
                envVars[key.trim()] = value;
              }
            }
          });
          
          // Add deployment-specific variables
          envVars.PORT = '__NEW_PORT__';
          envVars.NODE_ENV = 'production';
          envVars.DEPLOYMENT_ID = '__DEPLOYMENT_ID__';
          envVars.NEXT_TELEMETRY_DISABLED = '1';
          
          // Create PM2 config
          const pm2Config = {
            apps: [{
              name: '__NEW_PROCESS__',
              script: './node_modules/.bin/next',
              args: 'start',
              cwd: '__NEW_DEPLOYMENT_PATH__',
              instances: 1,
              env: envVars,
              max_memory_restart: '512M',
              min_uptime: '5s',
              max_restarts: 3,
              autorestart: true,
              watch: false,
              kill_timeout: 5000,
              wait_ready: true,
              listen_timeout: 8000,
              error_file: '__DEPLOY_PATH__/logs/__NEW_PROCESS__-error.log',
              out_file: '__DEPLOY_PATH__/logs/__NEW_PROCESS__-out.log',
              time: true
            }]
          };
          
          fs.writeFileSync('ecosystem.config.cjs', 
            'module.exports = ' + JSON.stringify(pm2Config, null, 2) + ';'
          );
          
          console.log('✅ PM2 config created with', Object.keys(envVars).length, 'environment variables');
          console.log('📋 Environment variables loaded:', Object.keys(envVars).join(', '));
          
          // Show NEXT_PUBLIC variables specifically
          const nextPublicVars = Object.keys(envVars).filter(key => key.startsWith('NEXT_PUBLIC_'));
          console.log('🔍 NEXT_PUBLIC variables in PM2 config:', nextPublicVars.join(', '));
          EOFJS
          
          # Create PM2 config with all environment variables - FIXED: Use .cjs extension
          node create_pm2_config.cjs
          
          # Replace placeholders in the generated config
          sed -i "s|__NEW_PORT__|$NEW_PORT|g" ecosystem.config.cjs
          sed -i "s|__DEPLOYMENT_ID__|$DEPLOYMENT_ID|g" ecosystem.config.cjs
          sed -i "s|__NEW_PROCESS__|$NEW_PROCESS|g" ecosystem.config.cjs
          sed -i "s|__NEW_DEPLOYMENT_PATH__|$NEW_DEPLOYMENT_PATH|g" ecosystem.config.cjs
          sed -i "s|__DEPLOY_PATH__|$DEPLOY_PATH|g" ecosystem.config.cjs
          
          # Show PM2 config (first 30 lines)
          echo "🔍 PM2 config preview:"
          head -30 ecosystem.config.cjs
          
          # Start new process
          echo "🚀 Starting $NEW_PROCESS on port $NEW_PORT..."
          pm2 start ecosystem.config.cjs
          
          # Wait a moment for the process to start
          sleep 3
          
          # Debug: Check if environment variables are loaded
          echo "🔍 Checking environment variables in PM2 process..."
          pm2 show $NEW_PROCESS | grep -A 50 "Environment:" || echo "Could not retrieve environment info"
          
          # Test if the application can access environment variables
          echo "🔍 Testing environment variable access..."
          curl -s "http://localhost:$NEW_PORT" >/dev/null 2>&1 && echo "✅ Application responding" || echo "⚠️ Application not responding yet"
          
          # Health check function
          health_check() {
            local port=$1
            local max_attempts=$2
            local interval=$3
            
            echo "🔍 Health check on port $port (max $max_attempts attempts)..."
            
            for i in $(seq 1 $max_attempts); do
              if curl -f -s --max-time 2 "http://localhost:$port" >/dev/null 2>&1; then
                echo "✅ Health check passed on port $port (attempt $i)"
                return 0
              fi
              echo "🔄 Health check attempt $i/$max_attempts on port $port..."
              sleep $interval
            done
            
            echo "❌ Health check failed after $max_attempts attempts"
            echo "🔍 PM2 logs for debugging:"
            pm2 logs $NEW_PROCESS --lines 30
            return 1
          }
          
          # Local health check
          if [ "$FIRST_DEPLOYMENT" = true ]; then
            # More lenient for first deployment
            if ! health_check $NEW_PORT 30 2; then
              echo "❌ First deployment health check failed"
              pm2 logs $NEW_PROCESS --lines 50
              pm2 delete $NEW_PROCESS
              exit 1
            fi
          else
            # Standard for updates
            if ! health_check $NEW_PORT 20 1; then
              echo "❌ Update health check failed"
              pm2 logs $NEW_PROCESS --lines 20
              pm2 delete $NEW_PROCESS
              exit 1
            fi
          fi
          
          # Update the upstream configuration that the existing site config expects
          echo "🔄 Updating upstream $UPSTREAM_NAME to point to port $NEW_PORT..."
          sudo mkdir -p /etc/nginx/conf.d/
          sudo tee "/etc/nginx/conf.d/$UPSTREAM_NAME.conf" > /dev/null << EOFNGINX
          upstream $UPSTREAM_NAME {
              server 127.0.0.1:$NEW_PORT;
          }
          EOFNGINX
          
          # Test Nginx configuration
          echo "🔍 Testing Nginx configuration..."
          if sudo nginx -t; then
            echo "✅ Nginx configuration test passed"
            sudo nginx -s reload
            echo "✅ Nginx reloaded successfully"
            sleep 3
            
            # Always proceed with deployment since local health check passed
            echo "✅ Local health check passed, proceeding with deployment"
            
            # Stop old process if it exists and this is an update
            if [ "$FIRST_DEPLOYMENT" = false ] && [ -n "$OLD_PROCESS" ]; then
              if pm2 describe $OLD_PROCESS >/dev/null 2>&1; then
                echo "🛑 Stopping old process: $OLD_PROCESS"
                pm2 stop $OLD_PROCESS
                sleep 1
                pm2 delete $OLD_PROCESS
              else
                echo "ℹ️ Old process $OLD_PROCESS not found (already stopped)"
              fi
            fi
            
            # Update symlinks and staging
            echo "🔄 Updating symlinks..."
            [ -L "$CURRENT_PATH" ] && rm "$CURRENT_PATH"
            ln -sfn "$NEW_DEPLOYMENT_PATH" "$CURRENT_PATH"
            
            echo "🔄 Updating staging directory..."
            rm -rf "$STAGING_PATH"/* 2>/dev/null || true
            cp -r "$NEW_DEPLOYMENT_PATH"/* "$STAGING_PATH/"
            
            # Save PM2 and cleanup
            pm2 save
            
            # Keep only 2 most recent deployments (final cleanup)
            echo "🧹 Final cleanup - keeping only 2 most recent deployments..."
            cd "$DEPLOY_PATH/deployments" && ls -t | tail -n +3 | xargs -r rm -rf
            
            echo "🎉 Deployment completed successfully!"
            echo "📂 Current deployments:"
            ls -la "$DEPLOY_PATH/deployments"
            
            # Final environment verification
            echo "🔍 Final environment verification:"
            echo "📄 .env file exists: $([ -f "$NEW_DEPLOYMENT_PATH/.env" ] && echo "✅ YES" || echo "❌ NO")"
            echo "📄 PM2 process running: $(pm2 describe $NEW_PROCESS >/dev/null 2>&1 && echo "✅ YES" || echo "❌ NO")"
            echo "📄 Environment variables in PM2:"
            pm2 show $NEW_PROCESS | grep -A 10 "Environment:" | head -10
            
            # Test the actual frontend to see if NEXT_PUBLIC variables are working
            echo "🔍 Testing NEXT_PUBLIC variables in frontend..."
            RESPONSE=$(curl -s "http://localhost:$NEW_PORT" || echo "CURL_FAILED")
            if echo "$RESPONSE" | grep -q "NEXT_PUBLIC_NODE_ENV"; then
              echo "✅ NEXT_PUBLIC_NODE_ENV found in frontend response"
              # Extract the actual value shown
              FRONTEND_VALUE=$(echo "$RESPONSE" | grep -o "NEXT_PUBLIC_NODE_ENV[^<]*" | head -1 || echo "not extracted")
              echo "📋 Frontend shows: $FRONTEND_VALUE"
            else
              echo "❌ NEXT_PUBLIC_NODE_ENV not found in frontend response"
              echo "🔍 Response preview (first 500 chars):"
              echo "$RESPONSE" | head -c 500
            fi
            
          else
            echo "❌ Nginx configuration test failed"
            echo "🔍 Checking existing Nginx configurations..."
            echo "📂 Files in /etc/nginx/conf.d/:"
            ls -la /etc/nginx/conf.d/ || true
            echo "📂 Files in /etc/nginx/sites-enabled/:"
            ls -la /etc/nginx/sites-enabled/ || true
            echo "🔍 Checking for conflicting upstream definitions..."
            grep -r "upstream.*$UPSTREAM_NAME" /etc/nginx/ || true
            
            pm2 delete $NEW_PROCESS
            exit 1
          fi
          EOF
          
          # Replace placeholders with actual values
          sed -i "s|__DEPLOY_PATH__|$DEPLOY_PATH|g" deploy_script.sh
          sed -i "s|__DEPLOYMENT_ID__|$DEPLOY_DIR|g" deploy_script.sh
          sed -i "s|__UPSTREAM_NAME__|$UPSTREAM_NAME|g" deploy_script.sh
          sed -i "s|__PROCESS_NAME__|$PROCESS_NAME|g" deploy_script.sh
          sed -i "s|__PORT_A__|$PORT_A|g" deploy_script.sh
          sed -i "s|__PORT_B__|$PORT_B|g" deploy_script.sh
          sed -i "s|__BRANCH__|$BRANCH|g" deploy_script.sh
          
          # Upload and execute the script
          scp deploy_script.sh deploy:$DEPLOY_PATH/deployments/$DEPLOY_DIR/deploy_script.sh
          ssh deploy "chmod +x $DEPLOY_PATH/deployments/$DEPLOY_DIR/deploy_script.sh && $DEPLOY_PATH/deployments/$DEPLOY_DIR/deploy_script.sh"
          
          # Clean up local script
          rm deploy_script.sh

      - name: 🔍 Verify Deployment
        run: |
          BRANCH="${{ needs.build.outputs.branch }}"
          DEPLOY_PATH="${{ steps.env-setup.outputs.deploy-path }}"
          UPSTREAM_NAME="${{ steps.env-setup.outputs.upstream-name }}"
          PROCESS_NAME="${{ steps.env-setup.outputs.process-name }}"
          DOMAIN="${{ steps.env-setup.outputs.domain }}"
          
          ssh deploy << VERIFY_SCRIPT
            echo "📊 PM2 Status:"
            pm2 status | grep "$PROCESS_NAME" || echo "No processes found"
            
            echo ""
            echo "🔧 Nginx Upstream Config:"
            cat /etc/nginx/conf.d/$UPSTREAM_NAME.conf 2>/dev/null || echo "No upstream config"
            
            echo ""
            echo "📂 Environment File Check:"
            if [ -f "$DEPLOY_PATH/current/.env" ]; then
              echo "✅ .env file exists in current deployment"
              echo "📄 .env file size: \$(wc -l < $DEPLOY_PATH/current/.env) lines"
              echo "📄 NEXT_PUBLIC variables in .env:"
              grep "^NEXT_PUBLIC_" $DEPLOY_PATH/current/.env | sed 's/=.*/=***MASKED***/' || echo "No NEXT_PUBLIC_ variables found"
            else
              echo "❌ .env file missing in current deployment"
            fi
            
            echo ""
            echo "🔍 PM2 Environment Variables:"
            CURRENT_PROCESS=\$(pm2 list | grep "$PROCESS_NAME" | grep "online" | awk '{print \$2}' | head -1)
            if [ -n "\$CURRENT_PROCESS" ]; then
              echo "📋 Current process: \$CURRENT_PROCESS"
              pm2 show \$CURRENT_PROCESS | grep -A 20 "Environment:" | head -20
              echo ""
              echo "🔍 NEXT_PUBLIC variables in PM2:"
              pm2 show \$CURRENT_PROCESS | grep -A 50 "Environment:" | grep "NEXT_PUBLIC" || echo "No NEXT_PUBLIC variables found in PM2"
            else
              echo "❌ No running process found"
            fi
            
            echo ""
            echo "🌐 Frontend Test - Checking if NEXT_PUBLIC variables appear:"
            FRONTEND_RESPONSE=\$(curl -s "https://$DOMAIN" 2>/dev/null || curl -s "http://localhost:3000" 2>/dev/null || echo "CURL_FAILED")
            if echo "\$FRONTEND_RESPONSE" | grep -q "NEXT_PUBLIC_NODE_ENV"; then
              echo "✅ NEXT_PUBLIC_NODE_ENV found in frontend"
              echo "📋 Frontend content with NEXT_PUBLIC_NODE_ENV:"
              echo "\$FRONTEND_RESPONSE" | grep -o "NEXT_PUBLIC_NODE_ENV[^<]*" | head -3
            else
              echo "❌ NEXT_PUBLIC_NODE_ENV not found in frontend"
              echo "🔍 Searching for any environment-related content:"
              echo "\$FRONTEND_RESPONSE" | grep -i "env\|check" | head -3 || echo "No environment content found"
            fi
          VERIFY_SCRIPT

      - name: 🧹 Cleanup
        if: always()
        run: rm -f ~/.ssh/deploy_key deployment.tar.gz

  notify:
    needs: [build, deploy]
    runs-on: self-hosted
    if: always()
    steps:
      - name: 📢 Status
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "🎉 Deployment successful!"
            echo "⚡ Cache hit: ${{ needs.build.outputs.cache-hit }}"
            echo "🌍 Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}"
          else
            echo "❌ Deployment failed!"
          fi