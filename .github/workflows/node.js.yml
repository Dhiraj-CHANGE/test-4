name: ⚡ Test1 API Zero Downtime Deploy

on:
  push:
    branches: [main, dev]

env:
  NODE_VERSION: '18'

jobs:
  deploy:
    runs-on: self-hosted
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
      - name: 📊 Generate Metadata
        id: meta
        run: |
          DEPLOYMENT_ID="$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:7}"
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "🆔 Deployment ID: $DEPLOYMENT_ID"

      - name: ⚙️ Setup Deployment Environment Variables
        run: |
          BRANCH=${GITHUB_REF##*/}

          if [ "$BRANCH" = "main" ]; then
            echo "DEPLOY_PATH=${{ secrets.PROD_SERVER_PATH }}" >> $GITHUB_ENV
            echo "SERVER=${{ secrets.PROD_SERVER_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.PROD_SERVER_USER }}" >> $GITHUB_ENV
            echo "PORT_SSH=${{ secrets.PROD_SSH_PORT }}" >> $GITHUB_ENV
            echo "PROCESS_NAME=${{ secrets.PROD_PROCESS_NAME }}" >> $GITHUB_ENV
          else
            echo "DEPLOY_PATH=${{ secrets.DEV_SERVER_PATH }}" >> $GITHUB_ENV
            echo "SERVER=${{ secrets.DEV_SERVER_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.DEV_SERVER_USER }}" >> $GITHUB_ENV
            echo "PORT_SSH=${{ secrets.DEV_SSH_PORT }}" >> $GITHUB_ENV
            echo "PROCESS_NAME=${{ secrets.DEV_PROCESS_NAME }}" >> $GITHUB_ENV
          fi

          echo "DEPLOYMENT_ID=${{ steps.meta.outputs.deployment-id }}" >> $GITHUB_ENV

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo '${{ secrets.PROD_SSH_PRIVATE_KEY }}' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          cat > ~/.ssh/config << EOF
          Host deploy
            HostName $SERVER
            User $USER
            Port $PORT_SSH
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            ServerAliveInterval 30
            ConnectTimeout 10
          EOF

      - name: 🚀 Deploy with Zero Downtime (Build on Server)
        run: |
          ssh deploy << 'DEPLOY_SCRIPT'
            set -e

            cd $DEPLOY_PATH

            echo "🔄 Cloning latest code..."
            DEPLOY_DIR="$DEPLOY_PATH/releases/${DEPLOYMENT_ID}"
            mkdir -p "$DEPLOY_DIR"
            git clone https://github.com/${GITHUB_REPOSITORY}.git "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"
            git checkout $GITHUB_SHA

            echo "📦 Installing dependencies..."
            npm ci --omit=dev --prefer-offline --no-audit --progress=false

            echo "🏗️ Building project..."
            npm run build

            echo "🔧 Setting environment variables..."
            echo '${{ secrets.PROD_ENV_SECRET }}' > .env
            echo "NODE_ENV=production" >> .env

            CURRENT_PORT=$(grep -o "127.0.0.1:[0-9]*" /etc/nginx/conf.d/test1_backend.conf | cut -d: -f2 || echo "")
            if [ "$CURRENT_PORT" = "5005" ]; then
              NEW_PORT="5006"
              NEW_PROCESS="${PROCESS_NAME}-b"
              OLD_PROCESS="${PROCESS_NAME}-a"
            else
              NEW_PORT="5005"
              NEW_PROCESS="${PROCESS_NAME}-a"
              OLD_PROCESS="${PROCESS_NAME}-b"
            fi

            echo "PORT=$NEW_PORT" >> .env

            echo "🔧 Creating PM2 config..."
            cat > ecosystem.config.js << EOF
          module.exports = {
            apps: [{
              name: '$NEW_PROCESS',
              script: 'node_modules/.bin/next',
              args: 'start',
              cwd: '$DEPLOY_DIR',
              instances: 1,
              exec_mode: 'cluster',
              env: {
                NODE_ENV: 'production',
                PORT: '$NEW_PORT',
                PWD: '$DEPLOY_DIR',
                NEXT_TELEMETRY_DISABLED: '1'
              },
              max_memory_restart: '512M',
              wait_ready: true,
              listen_timeout: 15000
            }]
          };
          EOF

            echo "🚀 Starting new process $NEW_PROCESS on port $NEW_PORT..."
            pm2 start ecosystem.config.js

            health_check() {
              local port=$1
              for i in {1..30}; do
                if curl -fs "http://localhost:$port/api/health" > /dev/null; then
                  echo "✅ Health check passed on port $port"
                  return 0
                fi
                sleep 2
              done
              echo "❌ Health check failed"
              return 1
            }

            echo "⏳ Waiting for app to be ready..."
            sleep 5

            if health_check $NEW_PORT; then
              echo "🔄 Switching Nginx to port $NEW_PORT..."
              sudo tee /etc/nginx/conf.d/test1_backend.conf > /dev/null << EOF
          upstream test1_backend {
              server 127.0.0.1:$NEW_PORT;
          }
          EOF
              sudo nginx -t && sudo nginx -s reload
              sleep 3

              if curl -fs https://test1.api.change-networks.com/api/health > /dev/null; then
                echo "✅ External health check passed"
                echo "🛑 Stopping old process: $OLD_PROCESS"
                pm2 stop $OLD_PROCESS || true
                pm2 delete $OLD_PROCESS || true

                echo "💾 Saving PM2 state"
                pm2 save
              else
                echo "❌ External health check failed after Nginx switch"
                sudo tee /etc/nginx/conf.d/test1_backend.conf > /dev/null << EOF
          upstream test1_backend {
              server 127.0.0.1:$CURRENT_PORT;
          }
          EOF
                sudo nginx -s reload
                pm2 stop $NEW_PROCESS || true
                pm2 delete $NEW_PROCESS || true
                exit 1
              fi
            else
              echo "❌ New process failed internal health check"
              pm2 stop $NEW_PROCESS || true
              pm2 delete $NEW_PROCESS || true
              exit 1
            fi

            echo "🎉 Deployment completed successfully!"
          DEPLOY_SCRIPT

      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          echo "✅ Cleanup complete"

