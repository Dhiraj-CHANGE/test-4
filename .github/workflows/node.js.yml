name: ⚡ Test1 API Ultra-Fast Deploy

on:
  push:
    branches: [main, dev]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  build:
    runs-on: self-hosted
    outputs:
      deployment-id: ${{ steps.meta.outputs.deployment-id }}
      cache-hit: ${{ steps.cache-check.outputs.cache-hit }}
      build-hash: ${{ steps.build-hash.outputs.hash }}
    steps:
      - name: 📋 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 📊 Generate Metadata
        id: meta
        run: |
          DEPLOYMENT_ID="$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:7}"
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "🆔 Deployment ID: $DEPLOYMENT_ID"

      - name: 🔍 Generate Build Hash
        id: build-hash
        run: |
          # Create hash from all build-affecting files
          BUILD_HASH=$(find . -name "package*.json" -o -name "*.config.*" -o -name "tsconfig.json" | sort | xargs cat | sha256sum | cut -d' ' -f1)
          echo "hash=$BUILD_HASH" >> $GITHUB_OUTPUT
          echo "📦 Build Hash: $BUILD_HASH"

      - name: ⚡ Setup Node.js with Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Cache Build Output
        id: cache-check
        uses: actions/cache@v3
        with:
          path: |
            .next
            node_modules
          key: ${{ env.CACHE_VERSION }}-build-${{ runner.os }}-${{ steps.build-hash.outputs.hash }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-build-${{ runner.os }}-

      - name: 🚀 Fast Install Dependencies
        if: steps.cache-check.outputs.cache-hit != 'true'
        run: |
          # Ultra-fast dependency installation
          npm ci --prefer-offline --no-audit --no-fund --silent --progress=false
          echo "📦 Dependencies installed"

      - name: 🏗️ Build Application
        if: steps.cache-check.outputs.cache-hit != 'true'
        run: |
          # Build with optimizations
          NODE_ENV=production npm run build
          echo "✅ Build completed"

      - name: 📦 Create Optimized Package
        run: |
          # Create minimal deployment package
          echo "📦 Creating optimized package..."
          
          # Only include essential runtime files
          tar -czf deployment.tar.gz \
            --exclude='node_modules/.cache' \
            --exclude='node_modules/*/test*' \
            --exclude='node_modules/*/docs' \
            --exclude='node_modules/*/*.md' \
            --exclude='.next/cache' \
            .next \
            node_modules \
            public \
            package.json \
            next.config.*
          
          echo "📦 Package size: $(du -sh deployment.tar.gz | cut -f1)"

      - name: 🚀 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ steps.meta.outputs.deployment-id }}
          path: deployment.tar.gz
          retention-days: 1
          compression-level: 1

  deploy:
    needs: build
    runs-on: self-hosted
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
      - name: 📥 Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-${{ needs.build.outputs.deployment-id }}
          path: .

      - name: ⚙️ Setup Environment
        run: |
          BRANCH=${GITHUB_REF##*/}
          
          if [ "$BRANCH" = "main" ]; then
            echo "DEPLOY_PATH=${{ secrets.PROD_SERVER_PATH }}" >> $GITHUB_ENV
            echo "SERVER=${{ secrets.PROD_SERVER_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.PROD_SERVER_USER }}" >> $GITHUB_ENV
            echo "PORT_SSH=${{ secrets.PROD_SSH_PORT }}" >> $GITHUB_ENV
            echo "PROCESS_NAME=${{ secrets.PROD_PROCESS_NAME}}" >> $GITHUB_ENV
            echo "PORT_A=${{ secrets.PROD_PORT_A}}" >> $GITHUB_ENV
            echo "PORT_B=${{ secrets.PROD_PORT_B}}" >> $GITHUB_ENV
            echo "DOMAIN=${{ secrets.PROD_DOMAIN}}" >> $GITHUB_ENV
          else
            echo "DEPLOY_PATH=${{ secrets.DEV_SERVER_PATH }}" >> $GITHUB_ENV
            echo "SERVER=${{ secrets.DEV_SERVER_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.DEV_SERVER_USER }}" >> $GITHUB_ENV
            echo "PORT_SSH=${{ secrets.DEV_SSH_PORT }}" >> $GITHUB_ENV
            echo "PROCESS_NAME=${{ secrets.DEV_PROCESS_NAME}}" >> $GITHUB_ENV
            echo "PORT_A=${{ secrets.DEV_PORT_A}}" >> $GITHUB_ENV
            echo "PORT_B=${{ secrets.DEV_PORT_B}}" >> $GITHUB_ENV
            echo "DOMAIN=${{ secrets.DEV_DOMAIN}}" >> $GITHUB_ENV
          fi
          
          echo "DEPLOYMENT_ID=${{ needs.build.outputs.deployment-id }}" >> $GITHUB_ENV

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo '${{ secrets.PROD_SSH_PRIVATE_KEY }}' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          cat > ~/.ssh/config << EOF
          Host deploy
            HostName $SERVER
            User $USER
            Port $PORT_SSH
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            ServerAliveInterval 30
            ConnectTimeout 5
            Compression yes
          EOF

      - name: 🚀 Robust Zero-Downtime Deploy
        run: |
          DEPLOY_DIR="${{ env.DEPLOYMENT_ID }}"
          
          # Create deployment directory and upload in parallel
          ssh deploy "mkdir -p ${{ env.DEPLOY_PATH }}/deployments/$DEPLOY_DIR" &
          SETUP_PID=$!
          
          # Upload while setup is running
          scp -C deployment.tar.gz deploy:${{ env.DEPLOY_PATH }}/deployments/$DEPLOY_DIR/deployment.tar.gz &
          UPLOAD_PID=$!
          
          # Wait for both to complete
          wait $SETUP_PID $UPLOAD_PID
          
          # Copy environment variables
          echo '${{ secrets.PROD_ENV_SECRET }}' | ssh deploy "cat > ${{ env.DEPLOY_PATH }}/deployments/$DEPLOY_DIR/.env"
          
          # Execute robust deployment with first-time handling
          ssh deploy << 'DEPLOY_SCRIPT'
            set -e
            
            # Setup paths
            DEPLOY_PATH="${{ env.DEPLOY_PATH }}"
            DEPLOYMENT_ID="${{ env.DEPLOYMENT_ID }}"
            NEW_DEPLOYMENT_PATH="$DEPLOY_PATH/deployments/$DEPLOYMENT_ID"
            CURRENT_PATH="$DEPLOY_PATH/current"
            STAGING_PATH="$DEPLOY_PATH/staging"
            
            # Create directories
            mkdir -p "$NEW_DEPLOYMENT_PATH" "$CURRENT_PATH" "$STAGING_PATH" "$DEPLOY_PATH/logs"
            
            cd "$NEW_DEPLOYMENT_PATH"
            
            # Fast extraction
            echo "📦 Extracting package..."
            tar -xzf deployment.tar.gz && rm deployment.tar.gz
            
            # Verify critical files
            [ ! -f "package.json" ] && { echo "❌ package.json missing"; exit 1; }
            [ ! -d ".next" ] && { echo "❌ .next directory missing"; exit 1; }
            
            # Check if this is first deployment by checking for nginx config and PM2 processes
            FIRST_DEPLOYMENT=false
            if [ ! -f "/etc/nginx/conf.d/test1_backend.conf" ]; then
              echo "🔍 No Nginx config found - likely first deployment"
              FIRST_DEPLOYMENT=true
            fi
            
            # Check for existing PM2 processes
            if ! pm2 list | grep -q "${{ env.PROCESS_NAME }}"; then
              echo "🔍 No PM2 processes found - likely first deployment"
              FIRST_DEPLOYMENT=true
            fi
            
            # Clean up any stale PM2 processes before starting
            echo "🧹 Cleaning up any stale processes..."
            pm2 delete "${{ env.PROCESS_NAME }}-a" 2>/dev/null || true
            pm2 delete "${{ env.PROCESS_NAME }}-b" 2>/dev/null || true
            
            # Port selection logic
            if [ "$FIRST_DEPLOYMENT" = true ]; then
              echo "🎯 First deployment detected"
              NEW_PORT="${{ env.PORT_A }}"
              NEW_PROCESS="${{ env.PROCESS_NAME }}-a"
              OLD_PROCESS=""
              
              # Create initial Nginx config
              echo "📝 Creating initial Nginx config..."
              sudo tee "/etc/nginx/conf.d/test1_backend.conf" > /dev/null << EOF
          upstream test1_backend {
              server 127.0.0.1:$NEW_PORT;
          }
          EOF
              
              # Test Nginx config
              if ! sudo nginx -t; then
                echo "❌ Initial Nginx config test failed"
                exit 1
              fi
              
              echo "✅ Initial Nginx config created"
              
            else
              # Get current port from Nginx config
              CURRENT_PORT=$(grep -o "127.0.0.1:[0-9]*" /etc/nginx/conf.d/test1_backend.conf 2>/dev/null | cut -d: -f2)
              
              # Fallback to default if parsing fails
              if [ -z "$CURRENT_PORT" ]; then
                CURRENT_PORT="${{ env.PORT_A }}"
                echo "⚠️ Could not determine current port, defaulting to $CURRENT_PORT"
              fi
              
              # Switch ports
              if [ "$CURRENT_PORT" = "${{ env.PORT_A }}" ]; then
                NEW_PORT="${{ env.PORT_B }}"
                NEW_PROCESS="${{ env.PROCESS_NAME }}-b"
                OLD_PROCESS="${{ env.PROCESS_NAME }}-a"
              else
                NEW_PORT="${{ env.PORT_A }}"
                NEW_PROCESS="${{ env.PROCESS_NAME }}-a"
                OLD_PROCESS="${{ env.PROCESS_NAME }}-b"
              fi
              
              echo "🔄 Port switch: $CURRENT_PORT → $NEW_PORT"
            fi
            
            # Add environment variables
            echo "PORT=$NEW_PORT" >> .env
            echo "NODE_ENV=production" >> .env
            echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> .env
            
            # Create optimized PM2 config
            cat > ecosystem.config.cjs << EOF
          module.exports = {
            apps: [{
              name: '$NEW_PROCESS',
              script: './node_modules/.bin/next',
              args: 'start',
              cwd: '$NEW_DEPLOYMENT_PATH',
              instances: 1,
              env: {
                NODE_ENV: 'production',
                PORT: '$NEW_PORT',
                NEXT_TELEMETRY_DISABLED: '1'
              },
              max_memory_restart: '512M',
              min_uptime: '5s',
              max_restarts: 3,
              autorestart: true,
              watch: false,
              kill_timeout: 5000,
              wait_ready: true,
              listen_timeout: 8000,
              error_file: '$DEPLOY_PATH/logs/$NEW_PROCESS-error.log',
              out_file: '$DEPLOY_PATH/logs/$NEW_PROCESS-out.log',
              time: true
            }]
          };
          EOF
            
            # Start new process
            echo "🚀 Starting $NEW_PROCESS on port $NEW_PORT..."
            pm2 start ecosystem.config.cjs
            
            # Create a simple health check endpoint if it doesn't exist
            if [ "$FIRST_DEPLOYMENT" = true ]; then
              echo "📝 Creating fallback health endpoint for first deployment..."
              mkdir -p pages/api
              cat > pages/api/health.js << EOF
          export default function handler(req, res) {
            res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
          }
          EOF
            fi
            
            # Health check function with fallback
            health_check() {
              local port=$1
              local max_attempts=$2
              local interval=$3
              local attempts=0
              
              echo "🔍 Starting health check on port $port (max $max_attempts attempts, ${interval}s interval)..."
              
              while [ $attempts -lt $max_attempts ]; do
                if curl -f -s --max-time 2 "http://localhost:$port/api/health" >/dev/null 2>&1; then
                  echo "✅ Health check passed on port $port (attempt $attempts)"
                  return 0
                fi
                
                attempts=$((attempts + 1))
                echo "🔄 Health check attempt $attempts/$max_attempts on port $port..."
                
                # On first deployment, check if process is still running
                if [ "$FIRST_DEPLOYMENT" = true ] && [ $attempts -gt 5 ]; then
                  if ! pm2 show $NEW_PROCESS | grep -q "online"; then
                    echo "❌ Process crashed during first deployment"
                    pm2 logs $NEW_PROCESS --lines 20
                    return 1
                  fi
                fi
                
                sleep $interval
              done
              
              echo "❌ Health check failed after $max_attempts attempts"
              return 1
            }
            
            # Different health check parameters for first deployment vs. updates
            if [ "$FIRST_DEPLOYMENT" = true ]; then
              # More lenient for first deployment: 30 attempts, 2s interval
              if ! health_check $NEW_PORT 30 2; then
                echo "❌ First deployment health check failed"
                pm2 logs $NEW_PROCESS --lines 50
                pm2 delete $NEW_PROCESS
                exit 1
              fi
            else
              # Stricter for updates: 20 attempts, 1s interval
              if ! health_check $NEW_PORT 20 1; then
                echo "❌ Update health check failed"
                pm2 logs $NEW_PROCESS --lines 20
                pm2 delete $NEW_PROCESS
                exit 1
              fi
            fi
            
            # Update Nginx config
            echo "🔄 Updating Nginx to point to port $NEW_PORT..."
            sudo tee "/etc/nginx/conf.d/test1_backend.conf" > /dev/null << EOF
          upstream test1_backend {
              server 127.0.0.1:$NEW_PORT;
          }
          EOF
            
            # Test and reload Nginx
            if sudo nginx -t; then
              sudo nginx -s reload
              echo "✅ Nginx reloaded successfully"
              
              # Wait for Nginx to pick up changes
              sleep 2
              
              # External health check with different handling for first deployment
              if [ "$FIRST_DEPLOYMENT" = true ]; then
                echo "🔍 First deployment - checking external access..."
                
                # Try up to 10 times with 2s interval
                for i in {1..10}; do
                  if curl -f -s --max-time 3 "https://${{ env.DOMAIN }}/api/health" >/dev/null 2>&1; then
                    echo "✅ External health check passed on attempt $i"
                    EXTERNAL_CHECK_PASSED=true
                    break
                  fi
                  echo "🔄 External health check attempt $i/10..."
                  sleep 2
                done
                
                # Continue even if external check fails for first deployment
                if [ "$EXTERNAL_CHECK_PASSED" != "true" ]; then
                  echo "⚠️ External health check failed, but continuing with first deployment"
                  echo "⚠️ Check DNS and Nginx configuration"
                fi
              else
                # For updates, ensure external access works
                if ! curl -f -s --max-time 3 "https://${{ env.DOMAIN }}/api/health" >/dev/null 2>&1; then
                  echo "❌ External health check failed, rolling back..."
                  
                  # Get current port from old process
                  if [ -n "$OLD_PROCESS" ]; then
                    OLD_PORT=$(pm2 describe $OLD_PROCESS | grep -o "PORT=[0-9]*" | cut -d= -f2)
                    
                    # Rollback Nginx config
                    if [ -n "$OLD_PORT" ]; then
                      echo "🔄 Rolling back to port $OLD_PORT..."
                      sudo tee "/etc/nginx/conf.d/test1_backend.conf" > /dev/null << EOF
          upstream test1_backend {
              server 127.0.0.1:$OLD_PORT;
          }
          EOF
                      sudo nginx -s reload
                    fi
                  fi
                  
                  # Stop failed process
                  pm2 delete $NEW_PROCESS
                  exit 1
                fi
                
                # Stop old process if it exists
                if [ -n "$OLD_PROCESS" ] && pm2 describe $OLD_PROCESS >/dev/null 2>&1; then
                  echo "🛑 Stopping old process: $OLD_PROCESS"
                  pm2 stop $OLD_PROCESS
                  sleep 1
                  pm2 delete $OLD_PROCESS
                fi
              fi
              
              # Update symlinks
              echo "🔄 Updating symlinks..."
              [ -L "$CURRENT_PATH" ] && rm "$CURRENT_PATH"
              ln -sfn "$NEW_DEPLOYMENT_PATH" "$CURRENT_PATH"
              
              # Update staging
              echo "🔄 Updating staging directory..."
              rm -rf "$STAGING_PATH"/* 2>/dev/null || true
              cp -r "$NEW_DEPLOYMENT_PATH"/* "$STAGING_PATH/"
              
              # Save PM2 configuration
              pm2 save
              
              # Cleanup old deployments (keep only 2 most recent)
              echo "🧹 Cleaning up old deployments (keeping only 2 most recent)..."
              cd "$DEPLOY_PATH/deployments" && ls -t | tail -n +3 | xargs -r rm -rf
              
              echo "🎉 Deployment completed successfully!"
              echo "📊 Active process: $NEW_PROCESS on port $NEW_PORT"
              
            else
              echo "❌ Nginx configuration test failed"
              pm2 delete $NEW_PROCESS
              exit 1
            fi
          DEPLOY_SCRIPT

      - name: 🔍 Verify Deployment
        run: |
          ssh deploy << 'VERIFY_SCRIPT'
            echo "📊 PM2 Status:"
            pm2 status | grep "${{ env.PROCESS_NAME }}" || echo "No PM2 processes found"
            
            echo "🌐 Health Check:"
            curl -s "https://${{ env.DOMAIN }}/api/health" || echo "Health endpoint not responding"
            
            echo "🔧 Nginx Config:"
            cat /etc/nginx/conf.d/test1_backend.conf 2>/dev/null || echo "No Nginx config found"
            
            echo "📂 Deployment History (keeping 2 most recent):"
            ls -la ${{ env.DEPLOY_PATH }}/deployments | head -5
          VERIFY_SCRIPT

      - name: 🧹 Cleanup
        if: always()
        run: rm -f ~/.ssh/deploy_key deployment.tar.gz

  notify:
    needs: [build, deploy]
    runs-on: self-hosted
    if: always()
    steps:
      - name: 📢 Status
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "🎉 Deployment successful!"
            echo "⚡ Cache hit: ${{ needs.build.outputs.cache-hit }}"
            echo "🌍 Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}"
          else
            echo "❌ Deployment failed!"
          fi