name: CI/CD

on:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      deployment-id: ${{ steps.set-vars.outputs.deployment-id }}
      package-hash: ${{ steps.set-vars.outputs.package-hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set deployment variables
        id: set-vars
        run: |
          DEPLOYMENT_ID=$(date +%s)
          PACKAGE_HASH=$(git rev-parse --short HEAD)
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "package-hash=$PACKAGE_HASH" >> $GITHUB_OUTPUT

      - name: Create deployment package
        run: |
          tar -czf deployment.tar.gz .

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ steps.set-vars.outputs.deployment-id }}
          path: deployment.tar.gz

  deploy:
    needs: build
    runs-on: self-hosted
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
      - name: 📥 Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-${{ needs.build.outputs.deployment-id }}
          path: .

      - name: ⚙️ Setup Environment
        run: |
          BRANCH=${GITHUB_REF##*/}
          ROUTER_TYPE=$(cat router-type.txt)
          echo "ROUTER_TYPE=$ROUTER_TYPE" >> $GITHUB_ENV

          if [ "$BRANCH" = "main" ]; then
            echo "DEPLOY_PATH=${{ secrets.PROD_SERVER_PATH }}" >> $GITHUB_ENV
            echo "SERVER=${{ secrets.PROD_SERVER_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.PROD_SERVER_USER }}" >> $GITHUB_ENV
            echo "PORT_SSH=${{ secrets.PROD_SSH_PORT }}" >> $GITHUB_ENV
            echo "PROCESS_NAME=${{ secrets.PROD_PROCESS_NAME}}" >> $GITHUB_ENV
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "DEPLOY_PATH=${{ secrets.DEV_SERVER_PATH }}" >> $GITHUB_ENV
            echo "SERVER=${{ secrets.DEV_SERVER_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.DEV_SERVER_USER }}" >> $GITHUB_ENV
            echo "PORT_SSH=${{ secrets.DEV_SSH_PORT }}" >> $GITHUB_ENV
            echo "PROCESS_NAME=${{ secrets.DEV_PROCESS_NAME}}" >> $GITHUB_ENV
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi

          echo "DEPLOYMENT_ID=${{ needs.build.outputs.deployment-id }}" >> $GITHUB_ENV
          echo "PACKAGE_HASH=${{ needs.build.outputs.package-hash }}" >> $GITHUB_ENV

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo '${{ secrets.PROD_SSH_PRIVATE_KEY }}' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          cat > ~/.ssh/config << EOF
          Host deploy
            HostName $SERVER
            User $USER
            Port $PORT_SSH
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            ServerAliveInterval 30
            ConnectTimeout 10
          EOF

      - name: 🚀 Zero-Downtime Deploy with Port Switching
        run: |
          ssh deploy "mkdir -p $DEPLOY_PATH/staging"
          scp deployment.tar.gz deploy:$DEPLOY_PATH/staging/deployment.tar.gz
          scp router-type.txt deploy:$DEPLOY_PATH/staging/router-type.txt
          echo '${{ secrets.PROD_ENV_SECRET }}' | ssh deploy "cat > $DEPLOY_PATH/staging/.env"

          ssh deploy << 'EOF'
            set -e
            cd $DEPLOY_PATH/staging
            echo "📦 Extracting deployment package..."
            tar -xzf deployment.tar.gz
            rm deployment.tar.gz

            CURRENT_PORT=$(grep -o "127.0.0.1:[0-9]*" /etc/nginx/conf.d/test1_backend.conf | cut -d: -f2 || echo "5005")
            if [ "$CURRENT_PORT" = "5005" ]; then
              NEW_PORT="5006"
              NEW_PROCESS="${PROCESS_NAME}-b"
              OLD_PROCESS="${PROCESS_NAME}-a"
            else
              NEW_PORT="5005"
              NEW_PROCESS="${PROCESS_NAME}-a"
              OLD_PROCESS="${PROCESS_NAME}-b"
            fi
            echo "🔄 Current port: $CURRENT_PORT, New port: $NEW_PORT"
            echo "🔄 New process: $NEW_PROCESS, Old process: $OLD_PROCESS"

            echo "📦 Installing production dependencies..."
            npm ci --omit=dev

            echo "🚀 Starting new process $NEW_PROCESS on port $NEW_PORT..."
            PORT=$NEW_PORT pm2 start ecosystem.config.js --only $NEW_PROCESS || pm2 restart $NEW_PROCESS

            echo "🔁 Swapping Nginx upstream port to $NEW_PORT..."
            sudo sed -i "s/127.0.0.1:$CURRENT_PORT/127.0.0.1:$NEW_PORT/" /etc/nginx/conf.d/test1_backend.conf
            sudo nginx -s reload

            echo "🧼 Stopping old process $OLD_PROCESS..."
            pm2 stop $OLD_PROCESS || echo "⚠️ Old process not found"

            echo "✅ Deployment to port $NEW_PORT complete"
          EOF
