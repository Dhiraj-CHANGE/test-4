# .github/workflows/deploy.yml
name: ⚡ Test1 API Zero Downtime Deploy

on:
  push:
    branches: [main, dev]

env:
  NODE_VERSION: '18'

jobs:
  build:
    runs-on: self-hosted
    outputs:
      deployment-id: ${{ steps.meta.outputs.deployment-id }}
      package-hash: ${{ steps.hash.outputs.package-hash }}
    steps:
      - name: 📋 Checkout
        uses: actions/checkout@v4

      - name: 📊 Generate Metadata
        id: meta
        run: |
          DEPLOYMENT_ID="$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:7}"
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "🆔 Deployment ID: $DEPLOYMENT_ID"

      - name: 📊 Generate Package Hash
        id: hash
        run: |
          # Use package-lock.json for more consistent caching
          PACKAGE_HASH=$(sha256sum package.json package-lock.json | sha256sum | cut -d ' ' -f 1)
          echo "package-hash=$PACKAGE_HASH" >> $GITHUB_OUTPUT
          echo "📦 Package Hash: $PACKAGE_HASH"

      - name: ♻️ Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔧 Install Dependencies
        run: |
          # Check if node_modules exists and is not empty
          if [ ! -d "node_modules" ] || [ -z "$(ls -A node_modules)" ]; then
            echo "📦 Installing dependencies..."
            npm ci --prefer-offline --no-audit --progress=false
          else
            echo "📦 Using cached dependencies"
          fi

      - name: 🏗️ Build Application
        run: |
          npm run build
          echo "✅ Build completed"

      - name: 📦 Create Deployment Package
        run: |
          # Package essential Next.js build artifacts
          tar -czf deployment.tar.gz .next public package.json package-lock.json next.config.js || true # next.config.js might not exist, allow failure

          echo "📦 Package size: $(du -sh deployment.tar.gz | cut -f1)"

      - name: 🚀 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ steps.meta.outputs.deployment-id }}
          path: deployment.tar.gz
          retention-days: 1

  deploy:
    needs: build
    runs-on: self-hosted
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
      - name: 📥 Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-${{ needs.build.outputs.deployment-id }}
          path: .

      - name: ⚙️ Setup Environment Variables
        run: |
          BRANCH=${GITHUB_REF##*/}
          
          if [ "$BRANCH" = "main" ]; then
            echo "DEPLOY_PATH=${{ secrets.PROD_SERVER_PATH }}" >> $GITHUB_ENV
            echo "SERVER=${{ secrets.PROD_SERVER_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.PROD_SERVER_USER }}" >> $GITHUB_ENV
            echo "PORT_SSH=${{ secrets.PROD_SSH_PORT }}" >> $GITHUB_ENV
            echo "PROCESS_NAME=${{ secrets.PROD_PROCESS_NAME}}" >> $GITHUB_ENV
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "DEPLOY_PATH=${{ secrets.DEV_SERVER_PATH }}" >> $GITHUB_ENV
            echo "SERVER=${{ secrets.DEV_SERVER_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.DEV_SERVER_USER }}" >> $GITHUB_ENV
            echo "PORT_SSH=${{ secrets.DEV_SSH_PORT }}" >> $GITHUB_ENV
            echo "PROCESS_NAME=${{ secrets.DEV_PROCESS_NAME}}" >> $GITHUB_ENV
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi
          
          echo "DEPLOYMENT_ID=${{ needs.build.outputs.deployment-id }}" >> $GITHUB_ENV
          echo "PACKAGE_HASH=${{ needs.build.outputs.package-hash }}" >> $GITHUB_ENV

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo '${{ secrets.PROD_SSH_PRIVATE_KEY }}' > ~/.ssh/deploy_key # Assumes one SSH key for both environments
          chmod 600 ~/.ssh/deploy_key
          
          cat > ~/.ssh/config << EOF
          Host deploy
            HostName $SERVER
            User $USER
            Port $PORT_SSH
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            ServerAliveInterval 30
            ConnectTimeout 10
          EOF

      - name: 🚀 Zero-Downtime Deploy with Port Switching
        run: |
          # Create staging directory on server first
          ssh deploy "mkdir -p ${{ env.DEPLOY_PATH }}/staging"
          
          # Upload deployment package
          echo "📤 Uploading deployment package..."
          scp deployment.tar.gz deploy:${{ env.DEPLOY_PATH }}/staging/deployment.tar.gz
          
          # Copy environment variables (use the correct secret for the environment)
          if [ "${{ github.ref == 'refs/heads/main' }}" = "true" ]; then
            echo "${{ secrets.PROD_ENV_SECRET }}" | ssh deploy "cat > ${{ env.DEPLOY_PATH }}/staging/.env"
          else
            echo "${{ secrets.DEV_ENV_SECRET }}" | ssh deploy "cat > ${{ env.DEPLOY_PATH }}/staging/.env"
          fi
          
          # Execute zero-downtime deployment with port switching
          ssh deploy << 'DEPLOY_SCRIPT'
            set -e
            
            # Setup paths
            DEPLOY_PATH="${{ env.DEPLOY_PATH }}"
            STAGING_PATH="$DEPLOY_PATH/staging"
            CURRENT_PATH="$DEPLOY_PATH/current"
            BACKUP_PATH="$DEPLOY_PATH/backup"
            
            echo "📁 Entering staging directory: $STAGING_PATH"
            cd "$STAGING_PATH"
            
            # Extract new deployment
            echo "📦 Extracting deployment package..."
            tar -xzf deployment.tar.gz
            rm deployment.tar.gz
            
            # Remove any potentially conflicting Next.js config files (e.g., if you switched from .ts to .js)
            rm -f next.config.ts next.config.mjs
            
            # Check current Nginx upstream port
            CURRENT_PORT=""
            if [ -f "/etc/nginx/conf.d/test1_backend.conf" ]; then
              CURRENT_PORT=$(grep -o "127.0.0.1:[0-9]*" /etc/nginx/conf.d/test1_backend.conf | cut -d: -f2)
            fi
            
            # If no current port found, default to 5005 (or your desired initial port)
            if [ -z "$CURRENT_PORT" ]; then
              CURRENT_PORT="5005"
            fi
            
            # Determine new port (switch between 5005 and 5006)
            if [ "$CURRENT_PORT" = "5005" ]; then
              NEW_PORT="5006"
              NEW_PROCESS="${{ env.PROCESS_NAME }}-b"
              OLD_PROCESS="${{ env.PROCESS_NAME }}-a"
            else
              NEW_PORT="5005"
              NEW_PROCESS="${{ env.PROCESS_NAME }}-a"
              OLD_PROCESS="${{ env.PROCESS_NAME }}-b"
            fi
            
            echo "🔄 Current port: $CURRENT_PORT, New port: $NEW_PORT"
            echo "🔄 New process: $NEW_PROCESS, Old process: $OLD_PROCESS"
            
            # Install production dependencies
            # We're relying on the pre-built .next directory from the build step.
            # Only production dependencies are needed here.
            echo "📦 Installing production dependencies..."
            rm -rf node_modules # Remove existing node_modules to ensure fresh install
            npm install --omit=dev --prefer-offline --no-audit --progress=false
            
            # Verify Next.js installation
            if [ ! -f "node_modules/.bin/next" ]; then
              echo "❌ Next.js binary not found after installation"
              exit 1
            fi
            
            echo "✅ Dependencies installed and verified"
            
            # Add environment variables from .env file that was copied earlier
            # Ensure PM2 can read them. PM2's env block will take precedence.
            # Add explicit Next.js telemetry disable here as well.
            echo "NEXT_TELEMETRY_DISABLED=1" >> .env
            
            # Create logs directory if it doesn't exist
            mkdir -p "$DEPLOY_PATH/logs"
            
            # Create PM2 ecosystem for new process with absolute paths
            cat > ecosystem.config.js << EOF
            module.exports = {
              apps: [{
                name: '$NEW_PROCESS',
                script: '$STAGING_PATH/node_modules/.bin/next',
                args: 'start',
                cwd: '$STAGING_PATH',
                instances: 1,
                exec_mode: 'cluster',
                env: {
                  NODE_ENV: 'production',
                  PORT: '$NEW_PORT',
                  PWD: '$STAGING_PATH',
                  NEXT_TELEMETRY_DISABLED: '1'
                },
                max_memory_restart: '512M',
                min_uptime: '10s',
                max_restarts: 3,
                autorestart: true,
                watch: false,
                kill_timeout: 8000,
                wait_ready: true,
                listen_timeout: 15000,
                error_file: '$DEPLOY_PATH/logs/$NEW_PROCESS-error.log',
                out_file: '$DEPLOY_PATH/logs/$NEW_PROCESS-out.log',
                log_file: '$DEPLOY_PATH/logs/$NEW_PROCESS.log',
                time: true,
                merge_logs: true,
                source_map_support: true
              }]
            };
            EOF
            
            # Start new process
            echo "🚀 Starting new process $NEW_PROCESS on port $NEW_PORT..."
            pm2 start ecosystem.config.js
            
            # Health check function
            health_check() {
              local port=$1
              local attempts=0
              local max_attempts=30
              local HEALTH_CHECK_URL="http://localhost:$port/api/health" # Your API health endpoint
              
              echo "🔍 Starting health check on port $port using $HEALTH_CHECK_URL..."
              
              while [ $attempts -lt $max_attempts ]; do
                if curl -f -s --max-time 3 "$HEALTH_CHECK_URL" > /dev/null 2>&1; then
                  echo "✅ Health check passed on port $port"
                  return 0
                fi
                attempts=$((attempts + 1))
                echo "🔄 Health check attempt $attempts/$max_attempts on port $port..."
                sleep 2
              done
              
              echo "❌ Health check failed after $max_attempts attempts"
              echo "🔍 Checking if port is listening..."
              netstat -tuln | grep ":$port " || echo "Port $port is not listening"
              echo "🔍 Checking PM2 logs for $NEW_PROCESS..."
              pm2 logs $NEW_PROCESS --lines 20 || true
              return 1
            }
            
            # Wait for new process to be ready
            echo "⏳ Waiting for new process to be ready..."
            sleep 8 # Give some initial time for the app to start
            
            if health_check $NEW_PORT; then
              echo "✅ New process is healthy on port $NEW_PORT"
              
              # Update Nginx upstream to point to new port
              echo "🔄 Updating Nginx to point to port $NEW_PORT..."
              
              sudo tee "/etc/nginx/conf.d/test1_backend.conf" > /dev/null << EOF
              upstream test1_backend {
                  server 127.0.0.1:$NEW_PORT;
              }
              EOF
              
              # Test and reload Nginx
              if sudo nginx -t; then
                sudo nginx -s reload
                echo "✅ Nginx reloaded successfully"
                
                # Wait for Nginx to pick up changes and verify external access
                sleep 3
                
                if curl -f -s --max-time 5 "https://test1.api.change-networks.com/api/health" > /dev/null 2>&1; then
                  echo "✅ Traffic successfully switched to new version"
                  
                  # Stop old process if it exists
                  if pm2 describe $OLD_PROCESS > /dev/null 2>&1; then
                    echo "🛑 Gracefully stopping old process: $OLD_PROCESS"
                    pm2 stop $OLD_PROCESS
                    sleep 2
                    pm2 delete $OLD_PROCESS
                  fi
                  
                  # Atomically switch current directory to the new deployment
                  # This ensures that the PM2 process (which uses current_path as CWD)
                  # points to the new version after the switch.
                  
                  # Move existing current to backup
                  if [ -d "$CURRENT_PATH" ] && [ "$(ls -A $CURRENT_PATH 2>/dev/null)" ]; then
                    echo "🗑️ Moving existing current deployment to backup: $CURRENT_PATH -> $BACKUP_PATH"
                    rm -rf "$BACKUP_PATH" # Clear previous backup
                    mv "$CURRENT_PATH" "$BACKUP_PATH"
                  else
                    echo "Current deployment directory does not exist or is empty, no backup created."
                  fi

                  # Move staging to current
                  echo "🚀 Moving staging deployment to current: $STAGING_PATH -> $CURRENT_PATH"
                  mv "$STAGING_PATH" "$CURRENT_PATH"
                  
                  # Ensure staging directory is recreated for next deployment
                  mkdir -p "$STAGING_PATH"
                  
                  # PM2 needs to be updated to point to the new 'current' path
                  # This requires restarting the PM2 process with the correct CWD
                  echo "🔄 Restarting PM2 process $NEW_PROCESS with updated path..."
                  cd "$CURRENT_PATH" # Change to the new current directory for PM2 to find ecosystem.config.js
                  pm2 restart $NEW_PROCESS --update-env # restart and update env (including PWD)
                  
                  # Save PM2 configuration to persist changes across reboots
                  pm2 save
                  
                  echo "🎉 Zero-downtime deployment completed successfully!"
                  echo "📊 Active process: $NEW_PROCESS on port $NEW_PORT"
                  echo "📂 Working directory: $CURRENT_PATH"
                  
                else
                  echo "❌ External health check failed after Nginx switch. Rolling back."
                  
                  # Rollback Nginx config
                  if [ -n "$CURRENT_PORT" ]; then
                    echo "🔄 Rolling back Nginx to port $CURRENT_PORT..."
                    sudo tee "/etc/nginx/conf.d/test1_backend.conf" > /dev/null << EOF
                    upstream test1_backend {
                        server 127.0.0.1:$CURRENT_PORT;
                    }
                    EOF
                    sudo nginx -s reload
                    echo "✅ Nginx rolled back successfully"
                  fi
                  
                  # Stop failed new process
                  echo "🛑 Stopping failed new process: $NEW_PROCESS"
                  pm2 stop $NEW_PROCESS || true
                  pm2 delete $NEW_PROCESS || true
                  
                  exit 1
                fi
              else
                echo "❌ Nginx configuration test failed. Not reloading Nginx."
                pm2 stop $NEW_PROCESS || true
                pm2 delete $NEW_PROCESS || true
                exit 1
              fi
              
            else
              echo "❌ New process failed health check. Not switching traffic."
              pm2 stop $NEW_PROCESS || true
              pm2 delete $NEW_PROCESS || true
              exit 1
            fi
          DEPLOY_SCRIPT

      - name: 🔍 Verify Deployment
        run: |
          ssh deploy << 'VERIFY_SCRIPT'
            echo "📊 PM2 Status:"
            pm2 status
            
            echo ""
            echo "🌐 External Health Check:"
            curl -s https://test1.api.change-networks.com/api/health || echo "External health check failed."
            
            echo ""
            echo "🔧 Nginx Upstream Config:"
            cat /etc/nginx/conf.d/test1_backend.conf || echo "Nginx config not found."
            
            echo ""
            echo "📋 Active Processes:"
            netstat -tuln | grep -E ':(5005|5006) ' || echo "No processes listening on 5005 or 5006."
            
            echo ""
            echo "🔗 Current Deployment Directory:"
            ls -la ${{ env.DEPLOY_PATH }}/current || echo "Current deployment directory not found."
          VERIFY_SCRIPT

      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key deployment.tar.gz
          echo "✅ Local cleanup completed"

  notify:
    needs: [build, deploy]
    runs-on: self-hosted
    if: always()
    steps:
      - name: 📢 Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "🎉 Test1 API deployment successful!"
            echo "🆔 ID: ${{ needs.build.outputs.deployment-id }}"
            echo "🌍 Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}"
            echo "🔗 URL: https://test1.api.change-networks.com"
          else
            echo "❌ Test1 API deployment failed!"
            echo "🆔 ID: ${{ needs.build.outputs.deployment-id }}"
            echo "🔍 Check the logs above for details"
          fi