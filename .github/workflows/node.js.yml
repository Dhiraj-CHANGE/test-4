name: ‚ö° Ultra-Fast Deploy (Sub-30s)

on:
  push:
    branches: [main, dev]

env:
  NODE_VERSION: '18'

jobs:
  lightning-deploy:
    runs-on: self-hosted
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
      - name: ‚ö° Lightning Setup
        id: setup
        run: |
          BRANCH=${GITHUB_REF##*/}
          DEPLOY_ID="$(date +%H%M%S)-${GITHUB_SHA:0:7}"
          
          # Skip if only docs changed
          git fetch origin $BRANCH --depth=2 >/dev/null 2>&1 || true
          if git diff --name-only HEAD~1 HEAD 2>/dev/null | grep -qvE '\.(js|jsx|ts|tsx|json)$|package\.json|next\.config\.|public/'; then
            echo "üìù Only docs/config changes - skipping deployment"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "deploy-id=$DEPLOY_ID" >> $GITHUB_OUTPUT
          
          # Environment configs
          if [ "$BRANCH" = "main" ]; then
            echo "server=${{ secrets.PROD_DOMAIN }}" >> $GITHUB_OUTPUT
            echo "user=${{ secrets.PROD_SERVER_USER }}" >> $GITHUB_OUTPUT
            echo "port=${{ secrets.PROD_SSH_PORT }}" >> $GITHUB_OUTPUT
            echo "path=${{ secrets.PROD_SERVER_PATH }}" >> $GITHUB_OUTPUT
            echo "process=${{ secrets.PROD_PROCESS_NAME }}" >> $GITHUB_OUTPUT
            echo "port-a=${{ secrets.PROD_PORT_A }}" >> $GITHUB_OUTPUT
            echo "port-b=${{ secrets.PROD_PORT_B }}" >> $GITHUB_OUTPUT
            echo "domain=${{ secrets.PROD_DOMAIN }}" >> $GITHUB_OUTPUT
            echo "upstream=test1_backend" >> $GITHUB_OUTPUT
            SSH_KEY='${{ secrets.PROD_SSH_PRIVATE_KEY }}'
            ENV_SECRET='${{ secrets.PROD_ENV_SECRET }}'
          else
            echo "server=${{ secrets.DEV_DOMAIN }}" >> $GITHUB_OUTPUT
            echo "user=${{ secrets.DEV_SERVER_USER }}" >> $GITHUB_OUTPUT
            echo "port=${{ secrets.DEV_SSH_PORT }}" >> $GITHUB_OUTPUT
            echo "path=${{ secrets.DEV_SERVER_PATH }}" >> $GITHUB_OUTPUT
            echo "process=${{ secrets.DEV_PROCESS_NAME }}" >> $GITHUB_OUTPUT
            echo "port-a=${{ secrets.DEV_PORT_A }}" >> $GITHUB_OUTPUT
            echo "port-b=${{ secrets.DEV_PORT_B }}" >> $GITHUB_OUTPUT
            echo "domain=${{ secrets.DEV_DOMAIN }}" >> $GITHUB_OUTPUT
            echo "upstream=test1_dev_backend" >> $GITHUB_OUTPUT
            SSH_KEY='${{ secrets.DEV_SSH_PRIVATE_KEY }}'
            ENV_SECRET='${{ secrets.DEV_ENV_SECRET }}'
          fi
          
          # Setup SSH (no Node.js installation needed!)
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/key && chmod 600 ~/.ssh/key
          echo "$ENV_SECRET" > .env.deploy
          
          cat > ~/.ssh/config << EOF
          Host target
            HostName ${{ steps.setup.outputs.server }}
            User ${{ steps.setup.outputs.user }}
            Port ${{ steps.setup.outputs.port }}
            IdentityFile ~/.ssh/key
            StrictHostKeyChecking no
            Compression yes
            ControlMaster auto
            ControlPath ~/.ssh/master-%r@%h:%p
            ControlPersist 300
          EOF

      - name: üìã Checkout & Build
        if: steps.setup.outputs.skip == 'false'
        run: |
          # Use existing Node.js (no installation!)
          echo "üìã Using existing Node.js: $(node --version)"
          
          # Check if we have a recent build
          BUILD_HASH=$(echo "$(git rev-parse HEAD)-$(stat -c %Y package.json 2>/dev/null || echo 0)" | sha256sum | cut -d' ' -f1 | head -c 12)
          
          if [ -f ".build-cache/$BUILD_HASH.tar.gz" ]; then
            echo "‚ö° Using cached build: $BUILD_HASH"
            tar -xzf ".build-cache/$BUILD_HASH.tar.gz"
          else
            echo "üèóÔ∏è Fresh build needed..."
            
            # Install only if node_modules missing
            [ ! -d "node_modules" ] && npm ci --silent --no-audit --no-fund
            
            # Build
            NODE_ENV=production npm run build
            
            # Cache the build
            mkdir -p .build-cache
            tar -czf ".build-cache/$BUILD_HASH.tar.gz" .next node_modules
            
            # Keep only 3 recent builds
            cd .build-cache && ls -t *.tar.gz 2>/dev/null | tail -n +4 | xargs -r rm -f
            cd ..
          fi

      - name: ‚ö° Ultra-Fast Deploy
        if: steps.setup.outputs.skip == 'false'
        run: |
          DEPLOY_ID="${{ steps.setup.outputs.deploy-id }}"
          DEPLOY_PATH="${{ steps.setup.outputs.path }}"
          UPSTREAM="${{ steps.setup.outputs.upstream }}"
          PROCESS="${{ steps.setup.outputs.process }}"
          PORT_A="${{ steps.setup.outputs.port-a }}"
          PORT_B="${{ steps.setup.outputs.port-b }}"
          
          echo "‚ö° Ultra-fast deploy: $DEPLOY_ID"
          
          # Test connection
          ssh -o ConnectTimeout=3 target "echo 'Connected'" || exit 1
          
          # Create deployment directory
          ssh target "mkdir -p $DEPLOY_PATH/ultra/$DEPLOY_ID"
          
          # Use rsync for lightning-fast transfer (way faster than scp)
          echo "üì§ Lightning transfer..."
          rsync -avz --compress-level=1 \
            --exclude='node_modules/.cache' \
            --exclude='node_modules/*/test*' \
            --exclude='node_modules/*/docs' \
            --exclude='node_modules/*/*.md' \
            --exclude='.next/cache' \
            --exclude='.git' \
            --exclude='.build-cache' \
            .next/ node_modules/ public/ package.json next.config.* \
            target:$DEPLOY_PATH/ultra/$DEPLOY_ID/
          
          # Transfer env
          scp .env.deploy target:$DEPLOY_PATH/ultra/$DEPLOY_ID/.env
          
          # Execute ultra-fast deployment
          ssh target << EOFREMOTE
          set -e
          cd $DEPLOY_PATH/ultra/$DEPLOY_ID
          
          # Get current port
          CURRENT_PORT=""
          if [ -f "/etc/nginx/conf.d/$UPSTREAM.conf" ]; then
            CURRENT_PORT=\$(grep -o "127.0.0.1:[0-9]*" /etc/nginx/conf.d/$UPSTREAM.conf | cut -d: -f2 2>/dev/null || echo "")
          fi
          
          # Switch ports
          if [ -z "\$CURRENT_PORT" ] || [ "\$CURRENT_PORT" = "$PORT_A" ]; then
            NEW_PORT="$PORT_B"
            NEW_PROCESS="$PROCESS-b"
            OLD_PROCESS="$PROCESS-a"
          else
            NEW_PORT="$PORT_A"
            NEW_PROCESS="$PROCESS-a"
            OLD_PROCESS="$PROCESS-b"
          fi
          
          echo "‚ö° \$CURRENT_PORT ‚Üí \$NEW_PORT"
          
          # Add port to env
          echo "PORT=\$NEW_PORT" >> .env
          echo "NODE_ENV=production" >> .env
          
          # Ultra-minimal PM2 config
          cat > pm2.config.js << EOFPM2
          module.exports = {
            apps: [{
              name: '\$NEW_PROCESS',
              script: './node_modules/.bin/next',
              args: 'start',
              cwd: '$DEPLOY_PATH/ultra/$DEPLOY_ID',
              env: { NODE_ENV: 'production', PORT: '\$NEW_PORT' },
              instances: 1,
              max_memory_restart: '256M',
              autorestart: true,
              watch: false,
              kill_timeout: 1000,
              listen_timeout: 2000
            }]
          };
          EOFPM2
          
          # Start new process
          pm2 start pm2.config.js >/dev/null 2>&1
          
          # Quick health check (5 seconds max)
          for i in {1..10}; do
            if curl -f -s --max-time 0.3 "http://localhost:\$NEW_PORT" >/dev/null 2>&1; then
              echo "‚úÖ Health check passed"
              break
            fi
            [ \$i -eq 10 ] && { echo "‚ùå Health check failed"; pm2 delete \$NEW_PROCESS >/dev/null 2>&1; exit 1; }
            sleep 0.5
          done
          
          # Atomic Nginx update
          echo "upstream $UPSTREAM { server 127.0.0.1:\$NEW_PORT; }" | sudo tee "/etc/nginx/conf.d/$UPSTREAM.conf" >/dev/null
          sudo nginx -s reload >/dev/null 2>&1
          
          # Background cleanup
          {
            # Stop old process
            pm2 delete \$OLD_PROCESS >/dev/null 2>&1 || true
            
            # Update symlink
            ln -sfn "$DEPLOY_PATH/ultra/$DEPLOY_ID" "$DEPLOY_PATH/current"
            
            # Cleanup old deployments (keep 2)
            cd "$DEPLOY_PATH/ultra" && ls -t | tail -n +3 | xargs -r rm -rf >/dev/null 2>&1 || true
            
            pm2 save >/dev/null 2>&1
          } &
          
          echo "‚ö° Ultra-fast deployment complete!"
          EOFREMOTE

      - name: ‚úÖ Verify
        if: steps.setup.outputs.skip == 'false'
        run: |
          # Quick verification
          RESPONSE=$(ssh target "curl -s -o /dev/null -w '%{http_code}' --max-time 1 'https://${{ steps.setup.outputs.domain }}' || echo 'FAIL'")
          echo "üåê Response: $RESPONSE"

      - name: üßπ Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/key .env.deploy
          ssh -O exit target 2>/dev/null || true

      - name: ‚è≠Ô∏è Skipped
        if: steps.setup.outputs.skip == 'true'
        run: echo "‚è≠Ô∏è Deployment skipped - no significant changes"

      - name: üìä Status
        if: always() && steps.setup.outputs.skip == 'false'
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚ö° ULTRA-FAST DEPLOYMENT SUCCESS!"
            echo "‚è±Ô∏è Target: Sub-30 seconds achieved!"
          else
            echo "‚ùå Deployment failed"
          fi