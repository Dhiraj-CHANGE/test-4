name: ⚡ Test1 API Ultra-Fast Deploy

on:
  push:
    branches: [main, dev]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v3'

jobs:
  build:
    runs-on: self-hosted
    outputs:
      deployment-id: ${{ steps.meta.outputs.deployment-id }}
      cache-hit: ${{ steps.cache-check.outputs.cache-hit }}
      branch: ${{ steps.branch.outputs.branch }}
    steps:
      - name: 📋 Get Branch Name
        id: branch
        run: |
          BRANCH=${GITHUB_REF##*/}
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "🌿 Branch: $BRANCH"

      - name: 📋 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 📊 Generate Metadata
        id: meta
        run: |
          DEPLOYMENT_ID="$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:7}"
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "🆔 Deployment ID: $DEPLOYMENT_ID"

      - name: ⚡ Setup Node.js with Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Cache Dependencies Only
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ env.CACHE_VERSION }}-deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-deps-${{ runner.os }}-

      - name: 🔄 Cache Build Output
        id: cache-check
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ env.CACHE_VERSION }}-build-${{ runner.os }}-${{ steps.branch.outputs.branch }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.json', '!node_modules/**') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-build-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: 🚀 Install Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          npm ci --prefer-offline --no-audit --no-fund --silent --progress=false
          echo "📦 Dependencies installed"

      - name: 🏗️ Build Application
        if: steps.cache-check.outputs.cache-hit != 'true'
        run: |
          NODE_ENV=production npm run build
          echo "✅ Build completed"

      - name: 📦 Create Optimized Package
        run: |
          echo "📦 Creating optimized package..."
          
          # Verify build exists
          if [ ! -d ".next" ]; then
            echo "❌ .next directory not found! Build may have failed."
            exit 1
          fi
          
          # Show build info
          echo "📊 Build info:"
          echo "  - .next size: $(du -sh .next | cut -f1)"
          echo "  - node_modules size: $(du -sh node_modules | cut -f1)"
          
          tar -czf deployment.tar.gz \
            --exclude='node_modules/.cache' \
            --exclude='node_modules/*/test*' \
            --exclude='node_modules/*/docs' \
            --exclude='node_modules/*/*.md' \
            --exclude='.next/cache' \
            .next \
            node_modules \
            public \
            package.json \
            next.config.*
          echo "📦 Package size: $(du -sh deployment.tar.gz | cut -f1)"

      - name: 🚀 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ steps.meta.outputs.deployment-id }}
          path: deployment.tar.gz
          retention-days: 1
          compression-level: 1

  deploy:
    needs: build
    runs-on: self-hosted
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
      - name: 📥 Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-${{ needs.build.outputs.deployment-id }}
          path: .

      - name: ⚙️ Setup Environment Variables
        id: env-setup
        run: |
          BRANCH="${{ needs.build.outputs.branch }}"
          echo "🌿 Branch: $BRANCH"
          
          if [ "$BRANCH" = "main" ]; then
            # Production environment
            SERVER="${{ secrets.PROD_DOMAIN }}" 
            USER="${{ secrets.PROD_SERVER_USER }}"
            PORT_SSH="${{ secrets.PROD_SSH_PORT }}"
            DEPLOY_PATH="${{ secrets.PROD_SERVER_PATH }}"
            PROCESS_NAME="${{ secrets.PROD_PROCESS_NAME }}"
            PORT_A="${{ secrets.PROD_PORT_A }}"
            PORT_B="${{ secrets.PROD_PORT_B }}"
            DOMAIN="${{ secrets.PROD_DOMAIN }}"
            ENV_SECRET="${{ secrets.PROD_ENV_SECRET }}"
            SSH_KEY="${{ secrets.PROD_SSH_PRIVATE_KEY }}"
            # For production, use the existing upstream name
            UPSTREAM_NAME="test1_backend"
            SITE_CONFIG_PATH="/etc/nginx/sites-enabled/***-change"
          else
            # Development environment
            SERVER="${{ secrets.DEV_DOMAIN }}"
            USER="${{ secrets.DEV_SERVER_USER }}"
            PORT_SSH="${{ secrets.DEV_SSH_PORT }}"
            DEPLOY_PATH="${{ secrets.DEV_SERVER_PATH }}"
            PROCESS_NAME="${{ secrets.DEV_PROCESS_NAME }}"
            PORT_A="${{ secrets.DEV_PORT_A }}"
            PORT_B="${{ secrets.DEV_PORT_B }}"
            DOMAIN="${{ secrets.DEV_DOMAIN }}"
            ENV_SECRET="${{ secrets.DEV_ENV_SECRET }}"
            SSH_KEY="${{ secrets.DEV_SSH_PRIVATE_KEY }}"
            # For development, use a different upstream name
            UPSTREAM_NAME="test1_dev_backend"
            SITE_CONFIG_PATH="/etc/nginx/sites-enabled/***-change"
          fi
          
          # Validate required variables
          if [ -z "$SERVER" ]; then
            echo "❌ SERVER is not set. Please add SERVER_HOST to your repository secrets."
            exit 1
          fi
          
          if [ -z "$USER" ]; then
            echo "❌ USER is not set. Please add SERVER_USER to your repository secrets."
            exit 1
          fi
          
          if [ -z "$PORT_SSH" ]; then
            echo "⚠️ PORT_SSH is not set, defaulting to 22"
            PORT_SSH="22"
          fi
          
          if [ -z "$SSH_KEY" ]; then
            echo "❌ SSH_KEY is not set. Please add SSH_PRIVATE_KEY to your repository secrets."
            exit 1
          fi
          
          if [ -z "$DEPLOY_PATH" ]; then
            echo "❌ DEPLOY_PATH is not set. Please add DEPLOY_PATH to your repository secrets."
            exit 1
          fi
          
          # Set outputs for use in later steps
          echo "server=$SERVER" >> $GITHUB_OUTPUT
          echo "user=$USER" >> $GITHUB_OUTPUT
          echo "port=$PORT_SSH" >> $GITHUB_OUTPUT
          echo "deploy-path=$DEPLOY_PATH" >> $GITHUB_OUTPUT
          echo "process-name=$PROCESS_NAME" >> $GITHUB_OUTPUT
          echo "port-a=$PORT_A" >> $GITHUB_OUTPUT
          echo "port-b=$PORT_B" >> $GITHUB_OUTPUT
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT
          echo "upstream-name=$UPSTREAM_NAME" >> $GITHUB_OUTPUT
          echo "site-config-path=$SITE_CONFIG_PATH" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          
          # Set environment variables for this job
          echo "DEPLOYMENT_ID=${{ needs.build.outputs.deployment-id }}" >> $GITHUB_ENV
          echo "SERVER=$SERVER" >> $GITHUB_ENV
          echo "USER=$USER" >> $GITHUB_ENV
          echo "PORT_SSH=$PORT_SSH" >> $GITHUB_ENV
          echo "DEPLOY_PATH=$DEPLOY_PATH" >> $GITHUB_ENV
          echo "PROCESS_NAME=$PROCESS_NAME" >> $GITHUB_ENV
          echo "PORT_A=$PORT_A" >> $GITHUB_ENV
          echo "PORT_B=$PORT_B" >> $GITHUB_ENV
          echo "DOMAIN=$DOMAIN" >> $GITHUB_ENV
          echo "UPSTREAM_NAME=$UPSTREAM_NAME" >> $GITHUB_ENV
          echo "SITE_CONFIG_PATH=$SITE_CONFIG_PATH" >> $GITHUB_ENV

      - name: 🔐 Setup SSH Configuration
        run: |
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Determine which SSH key to use based on branch
          BRANCH="${{ needs.build.outputs.branch }}"
          if [ "$BRANCH" = "main" ]; then
            SSH_KEY='${{ secrets.PROD_SSH_PRIVATE_KEY }}'
          else
            SSH_KEY='${{ secrets.DEV_SSH_PRIVATE_KEY }}'
          fi
          
          # Write SSH private key
          echo "$SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Verify SSH key format
          if ! ssh-keygen -l -f ~/.ssh/deploy_key >/dev/null 2>&1; then
            echo "❌ Invalid SSH key format"
            exit 1
          fi
          
          # Validate server hostname
          if [ -z "${{ steps.env-setup.outputs.server }}" ]; then
            echo "❌ Server hostname is empty. Please check your repository secrets."
            exit 1
          fi
          
          # Create SSH config with validated hostname
          cat > ~/.ssh/config << EOF
          Host deploy
            HostName ${{ steps.env-setup.outputs.server }}
            User ${{ steps.env-setup.outputs.user }}
            Port ${{ steps.env-setup.outputs.port }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            ServerAliveInterval 30
            ConnectTimeout 10
            Compression yes
          EOF
          
          # Test SSH connection
          echo "🔍 Testing SSH connection to ${{ steps.env-setup.outputs.server }}..."
          if ssh -o BatchMode=yes -o ConnectTimeout=10 deploy "echo 'SSH connection successful'"; then
            echo "✅ SSH connection test passed"
          else
            echo "❌ SSH connection test failed"
            exit 1
          fi

      - name: 🔧 Clean PM2 State
        run: |
          echo "🧹 Cleaning PM2 state and synchronizing..."
          ssh deploy << 'CLEAN_SCRIPT'
            # Stop any orphaned processes
            pm2 delete all 2>/dev/null || true
            
            # Clear PM2 state
            pm2 kill
            
            # Start PM2 daemon fresh
            pm2 ping
            
            # Remove any stale ecosystem files
            find /tmp -name "ecosystem.config.*" -delete 2>/dev/null || true
            
            echo "✅ PM2 state cleaned"
          CLEAN_SCRIPT

      - name: 🧹 Clean Old Deployments First
        run: |
          echo "🧹 Cleaning old deployments (keeping only 2 most recent)..."
          ssh deploy "mkdir -p ${{ steps.env-setup.outputs.deploy-path }}/deployments && cd ${{ steps.env-setup.outputs.deploy-path }}/deployments && ls -t | tail -n +3 | xargs -r rm -rf || echo 'No old deployments to clean'"

      - name: 🚀 Deploy Application
        run: |
          # Define variables locally first
          DEPLOY_DIR="${{ env.DEPLOYMENT_ID }}"
          BRANCH="${{ needs.build.outputs.branch }}"
          UPSTREAM_NAME="${{ steps.env-setup.outputs.upstream-name }}"
          SITE_CONFIG_PATH="${{ steps.env-setup.outputs.site-config-path }}"
          DEPLOY_PATH="${{ steps.env-setup.outputs.deploy-path }}"
          PROCESS_NAME="${{ steps.env-setup.outputs.process-name }}"
          PORT_A="${{ steps.env-setup.outputs.port-a }}"
          PORT_B="${{ steps.env-setup.outputs.port-b }}"
          
          # Verify all required variables are set
          echo "🔍 Verifying deployment variables..."
          echo "  - DEPLOY_DIR: $DEPLOY_DIR"
          echo "  - BRANCH: $BRANCH"
          echo "  - UPSTREAM_NAME: $UPSTREAM_NAME"
          echo "  - SITE_CONFIG_PATH: $SITE_CONFIG_PATH"
          echo "  - DEPLOY_PATH: $DEPLOY_PATH"
          echo "  - PROCESS_NAME: $PROCESS_NAME"
          echo "  - PORT_A: $PORT_A"
          echo "  - PORT_B: $PORT_B"
          
          if [ -z "$DEPLOY_PATH" ]; then
            echo "❌ DEPLOY_PATH is empty! Cannot proceed with deployment."
            exit 1
          fi
          
          echo "📤 Creating deployment directory: $DEPLOY_DIR"
          ssh deploy "mkdir -p $DEPLOY_PATH/deployments/$DEPLOY_DIR"
          
          echo "📤 Uploading deployment package..."
          scp -C deployment.tar.gz deploy:$DEPLOY_PATH/deployments/$DEPLOY_DIR/deployment.tar.gz
          
          # Copy environment variables based on branch
          if [ "$BRANCH" = "main" ]; then
            echo '${{ secrets.PROD_ENV_SECRET }}' | ssh deploy "cat > $DEPLOY_PATH/deployments/$DEPLOY_DIR/.env"
          else
            echo '${{ secrets.DEV_ENV_SECRET }}' | ssh deploy "cat > $DEPLOY_PATH/deployments/$DEPLOY_DIR/.env"
          fi
          
          # Create a temporary script file with all variables explicitly defined
          cat > deploy_script.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # These variables will be replaced by sed
          DEPLOY_PATH="__DEPLOY_PATH__"
          DEPLOYMENT_ID="__DEPLOYMENT_ID__"
          UPSTREAM_NAME="__UPSTREAM_NAME__"
          SITE_CONFIG_PATH="__SITE_CONFIG_PATH__"
          PROCESS_NAME="__PROCESS_NAME__"
          PORT_A="__PORT_A__"
          PORT_B="__PORT_B__"
          BRANCH="__BRANCH__"
          
          # Setup paths
          NEW_DEPLOYMENT_PATH="$DEPLOY_PATH/deployments/$DEPLOYMENT_ID"
          CURRENT_PATH="$DEPLOY_PATH/current"
          STAGING_PATH="$DEPLOY_PATH/staging"
          
          echo "🏗️ Setting up deployment paths..."
          echo "📂 New deployment: $NEW_DEPLOYMENT_PATH"
          echo "📂 Current: $CURRENT_PATH"
          echo "📂 Staging: $STAGING_PATH"
          echo "🔧 Upstream name: $UPSTREAM_NAME"
          echo "🔧 Site config path: $SITE_CONFIG_PATH"
          echo "🌿 Branch: $BRANCH"
          
          # Create directories
          mkdir -p "$NEW_DEPLOYMENT_PATH" "$CURRENT_PATH" "$STAGING_PATH" "$DEPLOY_PATH/logs"
          
          cd "$NEW_DEPLOYMENT_PATH"
          
          # Extract package
          echo "📦 Extracting package..."
          tar -xzf deployment.tar.gz && rm deployment.tar.gz
          
          # Verify critical files
          [ ! -f "package.json" ] && { echo "❌ package.json missing"; exit 1; }
          [ ! -d ".next" ] && { echo "❌ .next directory missing"; exit 1; }
          
          # Show build timestamp to verify it's fresh
          echo "✅ Package extracted and verified"
          echo "📅 Build timestamp: $(stat -c %y .next/BUILD_ID 2>/dev/null || echo 'N/A')"
          echo "🔍 Deployment ID in package: $DEPLOYMENT_ID"
          
          # Always use PORT_A for first deployment since we cleaned PM2 state
          NEW_PORT="$PORT_A"
          NEW_PROCESS="$PROCESS_NAME-a"
          echo "🚀 Clean deployment: Using port $NEW_PORT with process $NEW_PROCESS"
          
          # Add environment variables
          echo "PORT=$NEW_PORT" >> .env
          echo "NODE_ENV=production" >> .env
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> .env
          
          # Create PM2 config
          cat > ecosystem.config.cjs << EOFPM2
          module.exports = {
            apps: [{
              name: '$NEW_PROCESS',
              script: './node_modules/.bin/next',
              args: 'start',
              cwd: '$NEW_DEPLOYMENT_PATH',
              instances: 1,
              env: {
                NODE_ENV: 'production',
                PORT: '$NEW_PORT',
                NEXT_TELEMETRY_DISABLED: '1'
              },
              max_memory_restart: '512M',
              min_uptime: '5s',
              max_restarts: 3,
              autorestart: true,
              watch: false,
              kill_timeout: 5000,
              wait_ready: true,
              listen_timeout: 8000,
              error_file: '$DEPLOY_PATH/logs/$NEW_PROCESS-error.log',
              out_file: '$DEPLOY_PATH/logs/$NEW_PROCESS-out.log',
              time: true
            }]
          };
          EOFPM2
          
          # Start new process
          echo "🚀 Starting $NEW_PROCESS on port $NEW_PORT..."
          pm2 start ecosystem.config.cjs
          
          # Health check function
          health_check() {
            local port=$1
            local max_attempts=$2
            local interval=$3
            
            echo "🔍 Health check on port $port (max $max_attempts attempts)..."
            
            for i in $(seq 1 $max_attempts); do
              if curl -f -s --max-time 2 "http://localhost:$port/api/health" >/dev/null 2>&1; then
                echo "✅ Health check passed on port $port (attempt $i)"
                return 0
              fi
              echo "🔄 Health check attempt $i/$max_attempts on port $port..."
              sleep $interval
            done
            
            echo "❌ Health check failed after $max_attempts attempts"
            return 1
          }
          
          # Local health check
          if ! health_check $NEW_PORT 30 2; then
            echo "❌ Health check failed"
            pm2 logs $NEW_PROCESS --lines 50
            pm2 delete $NEW_PROCESS
            exit 1
          fi
          
          # Update the upstream configuration
          echo "🔄 Creating/updating upstream $UPSTREAM_NAME to point to port $NEW_PORT..."
          sudo mkdir -p /etc/nginx/conf.d/
          sudo tee "/etc/nginx/conf.d/$UPSTREAM_NAME.conf" > /dev/null << EOFNGINX
          upstream $UPSTREAM_NAME {
              server 127.0.0.1:$NEW_PORT;
          }
          EOFNGINX
          
          # CRITICAL FIX: Update the site config to use our upstream name
          if [ -f "$SITE_CONFIG_PATH" ]; then
            echo "🔄 Updating site config to use upstream $UPSTREAM_NAME..."
            
            # Create a backup of the original site config
            BACKUP_PATH="${SITE_CONFIG_PATH}.bak.$(date +%Y%m%d%H%M%S)"
            sudo cp "$SITE_CONFIG_PATH" "$BACKUP_PATH"
            echo "✅ Created backup of site config at $BACKUP_PATH"
            
            # Find and replace ALL upstream references in the site config
            # This handles both "upstream test1_backend" and "proxy_pass http://test1_backend"
            sudo sed -i "s/test1_backend/$UPSTREAM_NAME/g" "$SITE_CONFIG_PATH"
            echo "✅ Updated all references to use upstream $UPSTREAM_NAME"
            
            # Show what we changed
            echo "🔍 Updated site config content (relevant lines):"
            grep -n "$UPSTREAM_NAME" "$SITE_CONFIG_PATH" || echo "No matches found"
          else
            echo "❌ Site config not found at $SITE_CONFIG_PATH"
            exit 1
          fi
          
          # Test Nginx configuration
          echo "🔍 Testing Nginx configuration..."
          if sudo nginx -t; then
            echo "✅ Nginx configuration test passed"
            sudo nginx -s reload
            echo "✅ Nginx reloaded successfully"
            sleep 3
            
            # Update symlinks and staging
            echo "🔄 Updating symlinks..."
            [ -L "$CURRENT_PATH" ] && rm "$CURRENT_PATH"
            ln -sfn "$NEW_DEPLOYMENT_PATH" "$CURRENT_PATH"
            
            echo "🔄 Updating staging directory..."
            rm -rf "$STAGING_PATH"/* 2>/dev/null || true
            cp -r "$NEW_DEPLOYMENT_PATH"/* "$STAGING_PATH/"
            
            # Save PM2 and cleanup
            pm2 save
            
            # Keep only 2 most recent deployments (final cleanup)
            echo "🧹 Final cleanup - keeping only 2 most recent deployments..."
            cd "$DEPLOY_PATH/deployments" && ls -t | tail -n +3 | xargs -r rm -rf
            
            echo "🎉 Deployment completed successfully!"
            echo "📂 Current deployments:"
            ls -la "$DEPLOY_PATH/deployments"
            
          else
            echo "❌ Nginx configuration test failed"
            echo "🔍 Checking existing Nginx configurations..."
            echo "📂 Files in /etc/nginx/conf.d/:"
            ls -la /etc/nginx/conf.d/ || true
            echo "📂 Files in /etc/nginx/sites-enabled/:"
            ls -la /etc/nginx/sites-enabled/ || true
            echo "🔍 Checking for conflicting upstream definitions..."
            grep -r "upstream.*test1" /etc/nginx/ || true
            
            # Restore the backup if we modified the site config
            if [ -f "$BACKUP_PATH" ]; then
              echo "🔄 Restoring site config from backup..."
              sudo cp "$BACKUP_PATH" "$SITE_CONFIG_PATH"
              echo "✅ Restored site config from backup"
            fi
            
            pm2 delete $NEW_PROCESS
            exit 1
          fi
          EOF
          
          # Replace placeholders with actual values
          sed -i "s|__DEPLOY_PATH__|$DEPLOY_PATH|g" deploy_script.sh
          sed -i "s|__DEPLOYMENT_ID__|$DEPLOY_DIR|g" deploy_script.sh
          sed -i "s|__UPSTREAM_NAME__|$UPSTREAM_NAME|g" deploy_script.sh
          sed -i "s|__SITE_CONFIG_PATH__|$SITE_CONFIG_PATH|g" deploy_script.sh
          sed -i "s|__PROCESS_NAME__|$PROCESS_NAME|g" deploy_script.sh
          sed -i "s|__PORT_A__|$PORT_A|g" deploy_script.sh
          sed -i "s|__PORT_B__|$PORT_B|g" deploy_script.sh
          sed -i "s|__BRANCH__|$BRANCH|g" deploy_script.sh
          
          # Upload and execute the script
          scp deploy_script.sh deploy:$DEPLOY_PATH/deployments/$DEPLOY_DIR/deploy_script.sh
          ssh deploy "chmod +x $DEPLOY_PATH/deployments/$DEPLOY_DIR/deploy_script.sh && $DEPLOY_PATH/deployments/$DEPLOY_DIR/deploy_script.sh"
          
          # Clean up local script
          rm deploy_script.sh

      - name: 🔍 Verify Deployment
        run: |
          BRANCH="${{ needs.build.outputs.branch }}"
          DEPLOY_PATH="${{ steps.env-setup.outputs.deploy-path }}"
          UPSTREAM_NAME="${{ steps.env-setup.outputs.upstream-name }}"
          SITE_CONFIG_PATH="${{ steps.env-setup.outputs.site-config-path }}"
          
          ssh deploy << VERIFY_SCRIPT
            echo "📊 PM2 Status:"
            pm2 status
            
            echo ""
            echo "🔧 Nginx Upstream Config:"
            cat /etc/nginx/conf.d/$UPSTREAM_NAME.conf 2>/dev/null || echo "No upstream config"
            
            echo ""
            echo "🔧 Site Config (relevant part):"
            grep -A 5 -B 5 "$UPSTREAM_NAME" $SITE_CONFIG_PATH 2>/dev/null || echo "Upstream not found in site config"
            
            echo ""
            echo "📂 Deployment Directory (should show only 2 most recent):"
            ls -la $DEPLOY_PATH/deployments
            
            echo ""
            echo "📂 Current Symlink:"
            ls -la $DEPLOY_PATH/current
            
            echo ""
            echo "📂 Staging Directory:"
            ls -la $DEPLOY_PATH/staging
            
            echo ""
            echo "🌐 Health Check Test:"
            curl -s "https://${{ steps.env-setup.outputs.domain }}/api/health" || echo "External health check failed"
          VERIFY_SCRIPT

      - name: 🧹 Cleanup
        if: always()
        run: rm -f ~/.ssh/deploy_key deployment.tar.gz

  notify:
    needs: [build, deploy]
    runs-on: self-hosted
    if: always()
    steps:
      - name: 📢 Status
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "🎉 Deployment successful!"
            echo "⚡ Cache hit: ${{ needs.build.outputs.cache-hit }}"
            echo "🌍 Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}"
          else
            echo "❌ Deployment failed!"
          fi