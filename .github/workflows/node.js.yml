name: Testing CHANGE Admin CI/CD

on:
  push:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      # === CHECKOUT CODE ===
      - name: "‚úÖ Checkout Code"
        uses: actions/checkout@v3

      # === SET DEPLOYMENT VARIABLES ===
      - name: "üîß Set Deployment Variables"
        id: set-vars
        run: |
          BRANCH=${GITHUB_REF##*/}

          if [ "$BRANCH" = "main" ]; then
            echo "DEPLOY_DIR=${{ vars.PROD_SERVER_PATH }}" >> $GITHUB_ENV
            echo "SERVER=${{ vars.PROD_SERVER_HOST }}" >> $GITHUB_ENV
            echo "PROCESS_NAME=${{ vars.PROD_PROCESS_NAME }}" >> $GITHUB_ENV
            echo "REMOTE_USER=${{ secrets.PROD_SERVER_USER }}" >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.PROD_SSH_PORT }}" >> $GITHUB_ENV
            echo "DEPLOY_HOST_DIR=${{ secrets.PROD_SERVER_DEPLOYMENT_PATH }}" >> $GITHUB_ENV
            echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > private_key
            echo "${{ secrets.PROD_ENV_SECRET }}" > .env
            echo "PORT=5001" >> .env

          elif [ "$BRANCH" = "dev" ]; then
            echo "DEPLOY_DIR=${{ vars.DEV_SERVER_PATH }}" >> $GITHUB_ENV
            echo "SERVER=${{ vars.DEV_SERVER_HOST }}" >> $GITHUB_ENV
            echo "PROCESS_NAME=${{ vars.DEV_PROCESS_NAME }}" >> $GITHUB_ENV
            echo "REMOTE_USER=${{ secrets.DEV_SERVER_USER }}" >> $GITHUB_ENV
            echo "DEPLOY_HOST_DIR=${{ secrets.DEV_SERVER_DEPLOYMENT_PATH }}" >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.DEV_SSH_PORT }}" >> $GITHUB_ENV
            echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > private_key
            echo "${{ secrets.DEV_ENV_SECRET }}" > .env
            echo "PORT=5001" >> .env

          else
            echo "Unknown branch: $BRANCH"
            exit 1
          fi

          chmod 600 private_key .env

      # === SETUP NODE.JS ===
      - name: "üîß Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # === CACHE NODE MODULES ===
      - name: "‚ôªÔ∏è Cache Node Modules"
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # === INSTALL DEPENDENCIES ===
      - name: "üì¶ Install Dependencies"
        run: npm ci

      # === BUILD APP ===
      - name: "üèóÔ∏è Build Next.js App"
        run: npm run build

      # === SCP FILES TO SERVER ===
      - name: "üöÄ SCP Files to Server"
        run: |
          tar -czf deployment.tar.gz .next public package.json package-lock.json
          scp -P $SSH_PORT -i private_key -o StrictHostKeyChecking=no deployment.tar.gz $REMOTE_USER@$SERVER:$DEPLOY_DIR/deployment.tar.gz
          ssh -p $SSH_PORT -o StrictHostKeyChecking=no -i private_key $REMOTE_USER@$SERVER << 'EOF'
            cd $DEPLOY_DIR
            tar -xzf deployment.tar.gz
            rm deployment.tar.gz
          EOF

      # === SCP ENV FILE ===
      - name: "üìù Copy .env to Server"
        run: |
          scp -P $SSH_PORT -i private_key -o StrictHostKeyChecking=no .env $REMOTE_USER@$SERVER:$DEPLOY_DIR/.env

      # === SSH TO SERVER ===
      - name: "‚öôÔ∏è Run Remote Commands on Server"
        run: |
          ssh -p $SSH_PORT -o StrictHostKeyChecking=no -i private_key $REMOTE_USER@$SERVER << 'EOF'
            cd $DEPLOY_DIR
            npm ci
            rsync -av --remove-source-files $DEPLOY_DIR/ $DEPLOY_HOST_DIR/
            cd $DEPLOY_HOST_DIR
          EOF